{"author":{"id":"4d85ccdde3ad47c902de21b580354b67ed0cb07caa04e32d04ea93112f7f027e"},"ops":[{"type":3,"timestamp":1747406540,"nonce":"9jTjqlBVXo4EYfvy8uwicARWA3U=","metadata":{"github-id":"IC_kwDOCGKeh86sEvlJ","github-url":"https://github.com/git-bug/git-bug/issues/1431#issuecomment-2886924617"},"message":"to expand on this a bit...\n\n\u003e My question is: Who doesn't git-bug seem to use the builtin transports of git?\n\nbecause generally speaking, calling out to a `foo` executable on the host is _fine_, but it _does_ allow a malicious attacker to prepend to your `PATH` and have their `foo` executable picked up instead. that's the premise of that CVE -- MSFT hard-codes your current directory into their path search behavior (or at least did, at the time); this is what that CVE is about, so i won't belabour it further.\n\nas a result of this, `git-bug` moved to `go-git`, a library for doing git things without shelling out to `git` on the command line.\n\n\u003e Why does it not respect the entirety of the ssh config? Is there a way to fix this?\n\nyou might presume, then, that the most popular libgit2 library in the go community was super robust, and if you were to use it, you'd have no need to implement custom logic for pretty high-stakes features like _reading and applying your git configuration_ or _handling transport layer configuration and authentication_.\n\nwell... let's just say that those assumptions would be wrong. it's been a rocky road with go-git.","files":null}]}