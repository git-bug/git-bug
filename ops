{"author":{"id":"a336032aa21fb4037d18b3a3f7b8abdbeb8511da3f1f6284df5f5ea75ac5e151"},"ops":[{"type":3,"timestamp":1733441916,"nonce":"wxqVfMTIapJ4n8TEjhYrS+KXaic=","metadata":{"github-id":"IC_kwDOCGKeh86WTnyq","github-url":"https://github.com/git-bug/git-bug/issues/373#issuecomment-2521726122"},"message":"*This would be what I'm currently searching for… Too bad I can't use it yet :(*\n\n\u003e As a suggestion: I would vote for not distinguishing between issues and pull-requests, and instead allow converting an issue to a pull-request. Once the issue has been talked about, someone usually goes and implements something for it. Moving context to somewhere else doesn't seem intuitive (even though github, gitlab and gitea handle it this way). Mailing-lists don't have this distinction, and it doesn't make sense, I think. I think the solution might be to link a branch to the issue.\n\nWhile I initially liked @jeyj0 idea, I'm not sure if it is a good approach. But that may come from a lack of insight how the datamodel works.\n\nFirst of what data is needed for a Pull request:\n- Probably everything an Bug has\n- a Target branch (Ref?)\n- a source branch (Ref?) \n- Since we want to review, every comment probably should have the commit hash of source\n  Since while incorporating feedback the branch move on and older comments might get outdated\n- We may also want the current commit hash of the target branch for comments\n- A comment can also have a reference to an File (Git object) and a position in it\n  - For Text\n    - linen number start\n    - number of lines (length)\n    - column start (optional?)\n    - column end (optional?)\n  - Maybe other formats to? x,y coordinates for pictures? I wouldn't try to think to hard about that, but don't close this path since it looks like a nice features\n- other comments could be made on review comments that reference code, starting a discussion in the code.\n\nThat is how I would imagen the data (roughly). The reason why I think converting an issue to an pull request is not a good idea, is that I think target and source branch should be immutable (resetting a Branche to a completely different commit is problematic enough) and that converting would make it harder to merge. \n\nThink of following scenario:\nThere is an open issue and both Alice and Bob start a pull request locally (converting the ticket) and start developing and committing in the Pull request branch. Then both push. There may now be a conflict, if an issue can only have one source. Then one pull request would win and the other is \"overwritten\". Or it is implemented that one issue/pull request can have multiple source branches, then merging is not a problem, since both can coexist. But then one discussion will have comments to two different code bases. I think neither is optimal.\n\nWhat the structure is still missing, is a real \"Review\" workflow, that gives the Ok for the merge, maybe with some security that prevent merging, when not reviewed.\n\nPS:\nIf someone implement Reviews, please allow commenting on lines that have not been changed… github pull requests forbid that (for whatever reason), and that is currently a blocker for me :(","files":null}]}