{"author":{"id":"d82e3b0277388fab1285e702dfba0ce3b709e1919233977abaeab636c4c57550"},"ops":[{"type":1,"timestamp":1654093227,"nonce":"8pBg80ZYEpAOYFQbwFPLC4TcBjw=","metadata":{"github-id":"I_kwDOCGKeh85K3wVc","github-url":"https://github.com/git-bug/git-bug/issues/809","origin":"github"},"title":"Tests that include `t.Parallel()` causes concurrency issues on Windows test runner","message":"As discussed in #803, including a test that calls `t.Parallel()` and uses a temporary directory causes unpredictable failures on the Windows build server.  Rerunning a failed check often succeeds but failures report that many different tests randomly fail.  This is a pretty clear sign that there's a concurrency issue.  Here's the code that originally caused the problem:\n\n```go\nfunc TestGoGitRepo_Indexes(t *testing.T) {\n\tt.Parallel()\n\n\tplainRoot, err := ioutil.TempDir(\"\", \"\")\n\trequire.NoError(t, err)\n\tt.Cleanup(func() {\n\t\trequire.NoError(t, os.RemoveAll(plainRoot))\n\t})\n\n\trepo, err := InitGoGitRepo(plainRoot, namespace)\n\trequire.NoError(t, err)\n\tt.Cleanup(func() {\n\t\trequire.NoError(t, repo.Close())\n\t})\n\n\t// Can create indices\n\tindexA, err := repo.GetBleveIndex(\"a\")\n\trequire.NoError(t, err)\n\trequire.NotZero(t, indexA)\n\trequire.FileExists(t, filepath.Join(plainRoot, \".git\", namespace, \"indexes\", \"a\", \"index_meta.json\"))\n\trequire.FileExists(t, filepath.Join(plainRoot, \".git\", namespace, \"indexes\", \"a\", \"store\"))\n\n\tindexB, err := repo.GetBleveIndex(\"b\")\n\trequire.NoError(t, err)\n\trequire.NotZero(t, indexB)\n\n\t// Can get an existing index\n\tindexA, err = repo.GetBleveIndex(\"a\")\n\trequire.NoError(t, err)\n\trequire.NotZero(t, indexA)\n\n\t// Can delete an index\n\terr = repo.ClearBleveIndex(\"a\")\n\trequire.NoError(t, err)\n\trequire.NoDirExists(t, filepath.Join(plainRoot, \".git\", namespace, \"indexes\", \"a\"))\n}\n```\n\nLinux and MacOS filesystems have a different behavior than Windows - if you delete a file that's in use, it will remove the directory entry but the inodes won't be deleted until all the related file handles have been closed.  Changing the code above to the following makes the tests fail less frequently:\n\n```go\nfunc TestGoGitRepo_Indexes(t *testing.T) {\n\tt.Parallel()\n\n\tplainRoot := t.TempDir()\n\n\trepo, err := InitGoGitRepo(plainRoot, namespace)\n\trequire.NoError(t, err)\n\tt.Cleanup(func() {\n\t\trequire.NoError(t, repo.Close())\n\t})\n\n\t// Can create indices\n\tindexA, err := repo.GetBleveIndex(\"a\")\n\trequire.NoError(t, err)\n\trequire.NotZero(t, indexA)\n\trequire.FileExists(t, filepath.Join(plainRoot, \".git\", namespace, \"indexes\", \"a\", \"index_meta.json\"))\n\trequire.FileExists(t, filepath.Join(plainRoot, \".git\", namespace, \"indexes\", \"a\", \"store\"))\n\n\tindexB, err := repo.GetBleveIndex(\"b\")\n\trequire.NoError(t, err)\n\trequire.NotZero(t, indexB)\n\n\t// Can get an existing index\n\tindexA, err = repo.GetBleveIndex(\"a\")\n\trequire.NoError(t, err)\n\trequire.NotZero(t, indexA)\n\n\t// Can delete an index\n\terr = repo.ClearBleveIndex(\"a\")\n\trequire.NoError(t, err)\n\trequire.NoDirExists(t, filepath.Join(plainRoot, \".git\", namespace, \"indexes\", \"a\"))\n}\n```\n\nUsing `t.TempDir()` to create each test's temporary directory also registers an alternate cleanup function that has a different behavior from `os.RemoveAll()`.  This function includes the following ToB comment (see https://github.com/golang/go/blob/8a56c7742d96c8ef8e8dcecaf3d1c0e9f022f708/src/testing/testing.go#L1115):\n\n```go\n// removeAll is like os.RemoveAll, but retries Windows \"Access is denied.\"\n// errors up to an arbitrary timeout.\n//\n// Those errors have been known to occur spuriously on at least the\n// windows-amd64-2012 builder (https://go.dev/issue/50051), and can only occur\n// legitimately if the test leaves behind a temp file that either is still open\n// or the test otherwise lacks permission to delete. In the case of legitimate\n// failures, a failing test may take a bit longer to fail, but once the test is\n// fixed the extra latency will go away.\n```\n\nIt's possible that universally using `t.TempDir()` within `git-bug` will eliminate this issue.  It's going to be a bit hard to be sure since the only way to tell is to run the tests repeatedly on Github.  There are only three additional occurrences of `os.TempDir()` in the code as most of the tests rely on `CreateGoGitTestRepo` for their test repository instance.  I've been trying different scenarios in #804 and will make this change next.","files":null}]}