{"author":{"id":"4d85ccdde3ad47c902de21b580354b67ed0cb07caa04e32d04ea93112f7f027e"},"ops":[{"type":6,"timestamp":1722706634,"nonce":"+mIhs472Bu8badPiaTkUD/6pvgY=","metadata":{"github-id":"UCE_lAHOCGKeh86R0uX2zmFPeew"},"target":"ca9979550bf61d689d83cb9cadf700b704ccfbd8ef3c84c09b61c2f047616e92","message":"**Bridges** are a useful feature of `git-bug`, which allow synchronizing the internal state with an external issue management platform, such as GitHub issues.\n\nEach bridge adds to the maintenance burden of `git-bug`: imagine a scenario in which a bridge exists for _every other issue management platform - yikes!_ Instead, we could implement a system which looked for other binaries, such as `git-bug-bridge-\u003cname\u003e`, which implemented a common bridge interface maintained within `git-bug`. These other binaries could be maintained by the community, instead of adding the source code directly into `git-bug`.\n\n**Pros**\n- Distributed workload for managing bridges\n- Reduced risk of introducing code into `git-bug` that goes stale (unmaintained)\n- Better ability to focus on core feature set instead of third party, often proprietary integrations\n- _Can you think of another benefit? Please add a comment below._\n\n**Cons**\n- Installation might become more complex for users because they'll need to find bridges. We might maintain a central list of bridges, or support a sort of \"plugin registry\".\n- _Can you think of another con? Please add a comment below._","files":null},{"type":6,"timestamp":1722706961,"nonce":"lqtaF5hcB6aml8nP/Yodrz5pkhw=","metadata":{"github-id":"UCE_lAHOCGKeh86R0uX2zmFPfv0"},"target":"ca9979550bf61d689d83cb9cadf700b704ccfbd8ef3c84c09b61c2f047616e92","message":"**Bridges** are a useful feature of `git-bug`, which allow synchronizing the internal state with an external issue management platform, such as GitHub issues. While bridges are useful as a tool for interopability, they distract from development of the core feature set.\n\nEach bridge adds to the maintenance burden of `git-bug`: imagine a scenario in which a bridge exists for _every other issue management platform - yikes!_ Instead, we could implement a system which looked for other binaries, such as `git-bug-bridge-\u003cname\u003e`, which implemented a common bridge interface maintained within `git-bug`. These other binaries could be maintained by the community, instead of adding the source code directly into `git-bug`.\n\n**Pros**\n- Distributed workload for managing bridges\n- Reduced risk of introducing code into `git-bug` that goes stale (unmaintained)\n- Better ability to focus on core feature set instead of third party, often proprietary integrations\n- _Can you think of another benefit? Please add a comment below._\n\n**Cons**\n- Installation might become more complex for users who want to use a bridge, because they'll need to find a bridge. We might maintain a central list of bridges, or support a sort of \"plugin registry\" to ease that effort.\n- _Can you think of another con? Please add a comment below._","files":null},{"type":6,"timestamp":1722718732,"nonce":"dGvPgQu0GICiWdRS37VI8Slkjrg=","metadata":{"github-id":"UCE_lAHOCGKeh86R0uX2zmFQOGk"},"target":"ca9979550bf61d689d83cb9cadf700b704ccfbd8ef3c84c09b61c2f047616e92","message":"**Bridges** are a useful feature of `git-bug`, which allow synchronizing the internal state with an external issue management platform, such as GitHub issues. While bridges are useful as a tool for interopability, they distract from development of the core feature set.\n\nEach bridge adds to the maintenance burden of `git-bug`: imagine a scenario in which a bridge exists for _every other issue management platform - yikes!_ Instead, we could implement a system which looked for other binaries, such as `git-bug-bridge-\u003cname\u003e`, which implemented a common bridge interface maintained within `git-bug`. These other binaries could be maintained by the community, instead of adding the source code directly into `git-bug`.\n\n**Pros**\n- Distributed workload for managing bridges\n- Reduced risk of introducing code into `git-bug` that goes stale (unmaintained)\n- Better ability to focus on core feature set instead of third party, often proprietary integrations\n- _Can you think of another benefit? Please add a comment below._\n\n**Cons**\n- Installation might become more complex for users who want to use a bridge, because they'll need to find a bridge. We might maintain a central list of bridges, or support a sort of \"plugin registry\" to ease that effort.\n- _Can you think of another con? Please add a comment below._\n\n---\n\n_Technical design TBD; will aim to get this out in the next month or so_","files":null},{"type":6,"timestamp":1722718782,"nonce":"UIe/5ihP3hL8YRJLHdyotfGoSyw=","metadata":{"github-id":"UCE_lAHOCGKeh86R0uX2zmFQOOM"},"target":"ca9979550bf61d689d83cb9cadf700b704ccfbd8ef3c84c09b61c2f047616e92","message":"**Bridges** are a useful feature of `git-bug`, which allow synchronizing the internal state with an external issue management platform, such as GitHub issues. While bridges are useful as a tool for interopability, they distract from development of the core feature set.\n\nEach bridge adds to the maintenance burden of `git-bug`: imagine a scenario in which a bridge exists for _every other issue management platform - yikes!_ Instead, we could implement a system which looked for other binaries, such as `git-bug-bridge-\u003cname\u003e`, which implemented a common bridge interface maintained within `git-bug`. These other binaries could be maintained by the community, instead of adding the source code directly into `git-bug`.\n\n**Pros**\n- Distributed workload for managing bridges\n- Reduced risk of introducing code into `git-bug` that goes stale (unmaintained)\n- Better ability to focus on core feature set instead of third party, often proprietary integrations\n- _Can you think of another benefit? Please add a comment below._\n\n**Cons**\n- Installation might become more complex for users who want to use a bridge, because they'll need to find a bridge. We might maintain a central list of bridges, or support a sort of \"plugin registry\" to ease that effort.\n- _Can you think of another con? Please add a comment below._\n\n---\n\n_Technical design TBD; although I think the existing architecture is close to being able to support this; will aim to get this out in the next month or so_","files":null},{"type":6,"timestamp":1722727858,"nonce":"YWdj42ywUjuA5fNlBJIvsPUNbgw=","metadata":{"github-id":"UCE_lAHOCGKeh86R0uX2zmFQxVg"},"target":"ca9979550bf61d689d83cb9cadf700b704ccfbd8ef3c84c09b61c2f047616e92","message":"**Bridges** are a useful feature of `git-bug`, which allow synchronizing the internal state with an external issue management platform, such as GitHub issues. While bridges are useful as a tool for interopability, they distract from development of the core feature set.\n\nEach bridge adds to the maintenance burden of `git-bug`: imagine a scenario in which a bridge exists for _every other issue management platform - yikes!_ Instead, we could implement a system which looked for other binaries, such as `git-bug-bridge-\u003cname\u003e`, which implemented a common bridge interface maintained within `git-bug`. These other binaries could be maintained by the community, instead of adding the source code directly into `git-bug`.\n\n**Pros**\n- Distributed workload for managing bridges\n- Reduced risk of introducing code into `git-bug` that goes stale (unmaintained)\n- Better ability to focus on core feature set instead of third party, often proprietary integrations\n- _Can you think of another benefit? Please add a comment below._\n\n**Cons**\n- Installation might become more complex for users who want to use a bridge, because they'll need to find a bridge. We might maintain a central list of bridges, or support a sort of \"plugin registry\" to ease that effort.\n- _Can you think of another con? Please add a comment below._\n\n---\n\n_Technical design TBD; although I think the existing architecture is close to being able to support this; will aim to get a functional POC out in the next month or so_","files":null},{"type":6,"timestamp":1722727868,"nonce":"Bf87HvkzlOf1vGJZpPgrA15h0iU=","metadata":{"github-id":"UCE_lAHOCGKeh86R0uX2zmFQxW4"},"target":"ca9979550bf61d689d83cb9cadf700b704ccfbd8ef3c84c09b61c2f047616e92","message":"**Bridges** are a useful feature of `git-bug`, which allow synchronizing the internal state with an external issue management platform, such as GitHub issues. While bridges are useful as a tool for interopability, they distract from development of the core feature set.\n\nEach bridge adds to the maintenance burden of `git-bug`: imagine a scenario in which a bridge exists for _every other issue management platform - yikes!_ Instead, we could implement a system which looked for other binaries, such as `git-bug-bridge-\u003cname\u003e`, which implemented a common bridge interface maintained within `git-bug`. These other binaries could be maintained by the community, instead of adding the source code directly into `git-bug`.\n\n**Pros**\n- Distributed workload for managing bridges\n- Reduced risk of introducing code into `git-bug` that goes stale (unmaintained)\n- Better ability to focus on core feature set instead of third party, often proprietary integrations\n- _Can you think of another benefit? Please add a comment below._\n\n**Cons**\n- Installation might become more complex for users who want to use a bridge, because they'll need to find a bridge. We might maintain a central list of bridges, or support a sort of \"plugin registry\" to ease that effort.\n- _Can you think of another con? Please add a comment below._\n\n---\n\n_Technical design TBD; although I think the existing architecture is close to being able to support this; will aim to get a functional POC out in the next month or two_","files":null},{"type":6,"timestamp":1722727888,"nonce":"9tBfj7ZEaBV31E4HYapuOCAHPlU=","metadata":{"github-id":"UCE_lAHOCGKeh86R0uX2zmFQxZc"},"target":"ca9979550bf61d689d83cb9cadf700b704ccfbd8ef3c84c09b61c2f047616e92","message":"**Bridges** are a useful feature of `git-bug`, which allow synchronizing the internal state with an external issue management platform, such as GitHub issues. While bridges are useful as a tool for interopability, they distract from development of the core feature set.\n\nEach bridge adds to the maintenance burden of `git-bug`: imagine a scenario in which a bridge exists for _every other issue management platform - yikes!_ Instead, we could implement a system which looked for other binaries, such as `git-bug-bridge-\u003cname\u003e`, which implemented a common bridge interface maintained within `git-bug`. These other binaries could be maintained by the community, instead of adding the source code directly into `git-bug`.\n\n**Pros**\n- Distributed workload for managing bridges\n- Reduced risk of introducing code into `git-bug` that goes stale (unmaintained)\n- Better ability to focus on core feature set instead of third party, sometimes proprietary integrations\n- _Can you think of another benefit? Please add a comment below._\n\n**Cons**\n- Installation might become more complex for users who want to use a bridge, because they'll need to find a bridge. We might maintain a central list of bridges, or support a sort of \"plugin registry\" to ease that effort.\n- _Can you think of another con? Please add a comment below._\n\n---\n\n_Technical design TBD; although I think the existing architecture is close to being able to support this; will aim to get a functional POC out in the next month or two_","files":null},{"type":5,"timestamp":1722706255,"nonce":"CaUnbwYpskUcwch3y1NMwJqIi8E=","metadata":{"github-id":"LE_lADOCGKeh86R0uX2zwAAAAMzoWUG"},"added":["area/bridge"],"removed":[]},{"type":5,"timestamp":1722706255,"nonce":"PvBFEYIFiP/FF0JgrW/qO1aRNpw=","metadata":{"github-id":"LE_lADOCGKeh86R0uX2zwAAAAMzoWUK"},"added":["kind/feature"],"removed":[]},{"type":5,"timestamp":1722706255,"nonce":"uadJytHdWmubyLd63qI1DzhyRSw=","metadata":{"github-id":"LE_lADOCGKeh86R0uX2zwAAAAMzoWUN"},"added":["lifecycle/frozen"],"removed":[]},{"type":5,"timestamp":1722706255,"nonce":"JYS3ZHwcQq135IGsFiAJQFrT0WM=","metadata":{"github-id":"LE_lADOCGKeh86R0uX2zwAAAAMzoWUQ"},"added":["priority/important-longterm"],"removed":[]},{"type":5,"timestamp":1722706255,"nonce":"tweo1GhIGC61bbozjQVOWcDbwoA=","metadata":{"github-id":"LE_lADOCGKeh86R0uX2zwAAAAMzoWUT"},"added":["triage/needs-information"],"removed":[]},{"type":5,"timestamp":1722706672,"nonce":"lroidYK523PFzPnaBuemCEFT0+c=","metadata":{"github-id":"UNLE_lADOCGKeh86R0uX2zwAAAAMzobBm"},"added":[],"removed":["priority/important-longterm"]},{"type":5,"timestamp":1722706672,"nonce":"1h1c0deJCk679E/LL4wN2xaWhGc=","metadata":{"github-id":"LE_lADOCGKeh86R0uX2zwAAAAMzobBo"},"added":["priority/awaiting-more-evidence"],"removed":[]},{"type":5,"timestamp":1722707366,"nonce":"/jOScqNdTkjbfx7C30ukpF/L7fc=","metadata":{"github-id":"UNLE_lADOCGKeh86R0uX2zwAAAAMzojeZ"},"added":[],"removed":["priority/awaiting-more-evidence"]},{"type":5,"timestamp":1722707367,"nonce":"6T2PaneeHaa/MGqsg2mYxwR5bZE=","metadata":{"github-id":"LE_lADOCGKeh86R0uX2zwAAAAMzojed"},"added":["priority/important-longterm"],"removed":[]},{"type":3,"timestamp":1722738489,"nonce":"x+LQnWE/x3IrHL9rFVY4pYZT2Ug=","metadata":{"github-id":"IC_kwDOCGKeh86HI5q_","github-url":"https://github.com/git-bug/git-bug/issues/1227#issuecomment-2267257535"},"message":"@mattcen [said in another issue](https://github.com/MichaelMure/git-bug/issues/80#issuecomment-2267187443):\n\n\u003e Do you have ideas or the beginnings of a plan for this? Is it the sort of thing that's likely to get any more traction than the current approach? My concern is that while I agree that this will improve separation and reduce maintenance burden on git-bug core, it would likely involve a significant interface/API design and reimplementation of the 4-5 existing bridges, which is a lot of initial up-front work that could take significant effort (especially on volunteer time).\n\u003e \n\u003e (EDIT: To be clear, I'm in favour of the approach in general, aside from its potential effort/timeline)\n\nMoving the discussion here in order to keep the conversation in one place.\n\n---\n\nI reasoned about this today, while combing through the backlog of issues and PRs from the past several years, so we're pretty early in the process, to be sure. Yes, it will take some time, but if the question is \"should we focus on doing this\", or \"should we focus on implementing new bridges that comprise ~20-30% of the issues that have been opened over the past few years\"... my answer is that **this** is what should be focused on, because it unlocks the ability for arbitrary bridge implementation.\n\nI don't think this will require _too_ much refactoring of the existing interface. Mostly, the design here will be around the communication between `git-bug` and `$SOME_BRIDGE`. As an initial design idea, one approach could be that bridges are manually configured in git configuration, e.g. `git-bug.bridge.github.cmd = /usr/bin/git-bug-bridge-github`, and on `git-bug-bridge-*` operations, the bridge CLI is called with a request that it processes to send/receive data from the upstream source. This would be functional, and not actually require too much refactoring -- bridges would just need to be turned into a CLI, but the interface could largely remain the same.\n\nThat's just a thought. There are other options, such as forking a background server on `git-bug` invocations and letting bridges self-register at runtime. I'm still mulling over what a POC looks like. If time permits, I should have something up in the next month or two.","files":null},{"type":6,"timestamp":1722740767,"nonce":"3gBOdW6WEGecN2NIr3gTdsFif8M=","metadata":{"github-id":"UCE_lALOCGKeh86HI5q_zkxvit0"},"target":"34c8cb252fbc60b9a6453f58201c16c116401043e4ef0f6139dd7164546ef81c","message":"@mattcen [said in another issue](https://github.com/MichaelMure/git-bug/issues/80#issuecomment-2267187443):\n\n\u003e Do you have ideas or the beginnings of a plan for this? Is it the sort of thing that's likely to get any more traction than the current approach? My concern is that while I agree that this will improve separation and reduce maintenance burden on git-bug core, it would likely involve a significant interface/API design and reimplementation of the 4-5 existing bridges, which is a lot of initial up-front work that could take significant effort (especially on volunteer time).\n\u003e \n\u003e (EDIT: To be clear, I'm in favour of the approach in general, aside from its potential effort/timeline)\n\nMoving the discussion here in order to keep the conversation in one place.\n\n---\n\nI reasoned about this today, while combing through the backlog of issues and PRs from the past several years, so we're pretty early in the process, to be sure. Yes, it will take some time, but if the question is \"should we focus on doing this\", or \"should we focus on implementing new bridges that comprise ~20-30% of the issues that have been opened over the past few years\"... my answer is that **this** is what should be focused on, because it unlocks the ability for arbitrary bridge implementation.\n\nI don't think this will require _too_ much refactoring of the existing interface. Mostly, the design here will be around the communication between `git-bug` and `$SOME_BRIDGE`. As an initial design idea, one approach could be that bridges are manually configured in git configuration, e.g. `git-bug.bridge.github.cmd = /usr/bin/git-bug-bridge-github`, and on `git-bug-bridge-*` operations, the config option can be iterated through, calling each bridge CLI with a request that it processes to send/receive data from the upstream source. This would be functional, and not actually require too much refactoring -- bridges would just need to be turned into a CLI, but the interface could largely remain the same.\n\nThat's just a thought. There are other, perhaps more robust options, such as forking a background server on `git-bug` invocations and letting bridges self-register at runtime. I'm still mulling over what a POC looks like. If time permits, I should have something up in the next month or two.","files":null},{"type":6,"timestamp":1722740878,"nonce":"HTje/Yyc5geuK4UUo6sfvqhZxFw=","metadata":{"github-id":"UCE_lALOCGKeh86HI5q_zkxvjA0"},"target":"34c8cb252fbc60b9a6453f58201c16c116401043e4ef0f6139dd7164546ef81c","message":"@mattcen [said in another issue](https://github.com/MichaelMure/git-bug/issues/80#issuecomment-2267187443):\n\n\u003e Do you have ideas or the beginnings of a plan for this? Is it the sort of thing that's likely to get any more traction than the current approach? My concern is that while I agree that this will improve separation and reduce maintenance burden on git-bug core, it would likely involve a significant interface/API design and reimplementation of the 4-5 existing bridges, which is a lot of initial up-front work that could take significant effort (especially on volunteer time).\n\u003e \n\u003e (EDIT: To be clear, I'm in favour of the approach in general, aside from its potential effort/timeline)\n\nMoving the discussion here in order to keep the conversation in one place.\n\n---\n\nI reasoned about this today, while combing through the backlog of issues and PRs from the past several years, so we're pretty early in the process, to be sure. Yes, it will take some time, but if the question is \"should we focus on doing this\", or \"should we focus on implementing new bridges that comprise ~20-30% of the issues that have been opened over the past few years\"... my answer is that **this** is what should be focused on, because it unlocks the ability for arbitrary bridge implementation, and frees up all of that time for improving the core feature set and making `git-bug` a viable project management tool.\n\nI don't think this will require _too_ much refactoring of the existing interface. Mostly, the design here will be around the communication between `git-bug` and `$SOME_BRIDGE`. As an initial design idea, one approach could be that bridges are manually configured in git configuration, e.g. `git-bug.bridge.github.cmd = /usr/bin/git-bug-bridge-github`, and on `git-bug-bridge-*` operations, the config option can be iterated through, calling each bridge CLI with a request that it processes to send/receive data from the upstream source. This would be functional, and not actually require too much refactoring -- bridges would just need to be turned into a CLI, but the interface could largely remain the same.\n\nThat's just a thought. There are other, perhaps more robust options, such as forking a background server on `git-bug` invocations and letting bridges self-register at runtime. I'm still mulling over what a POC looks like. If time permits, I should have something up in the next month or two.","files":null}]}