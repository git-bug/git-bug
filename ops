{"author":{"id":"4d85ccdde3ad47c902de21b580354b67ed0cb07caa04e32d04ea93112f7f027e"},"ops":[{"type":3,"timestamp":1745209676,"nonce":"MbJvhkYkDC9gR5V04jO/LXnRDGE=","metadata":{"github-id":"IC_kwDOCGKeh86n8Tpb","github-url":"https://github.com/git-bug/git-bug/issues/1065#issuecomment-2817604187"},"message":"\u003e I hate this GitHub bot, and it seems hugely disrespectful to your users to use it.\n\u003e ...\n\u003e There is absolutely no reason for this bot to ever exist. Its only purpose is to hide existing bugs and pretend that the project is in much better shape than it actually is. There is zero cost of having open bugs, we have plenty of integers for new ones, maintainer just wants to show that he/she doesn’t care about their users, and it is more important for them to look like there are no problems than to actually help their users or even to encourage them to help each other.\n\ni added the configuration for the stale bot.\n\nthis bot is not closing issues. it's more of a \"heads up\", pay attention to this\". the _initial_ configuration was set to automatically close issues, but this was quickly adjusted due to user feedback (i think within 24 hours, but this number is just off the top of my head).\n\nas an example of how it's helpful:\n\ni vaguely recall seeing this title, likely from skimming through the issues a few months ago to see if i wanted to pull anything else into `0.8.1`, but the email i got tonight because the bot commented and rotated it brought it directly to my attention - and if i didn't get an email, that'd be fine too - because for planning purposes, being able to search `label:lifecycle/stale` or `label:lifecycle/rotten` to see if anything has fallen through the cracks is _incredibly_ helpful.\n\nother, larger projects with corporate backing and larger teams often use issue inactivity to close or even lock issues using stale bot or something else. for them, that can be helpful to reduce the \"infinite backlog\" that an accumulate -- and that's something that applies to this project, too.\n\ni can only assume that people who are adamantly against this sort of automation have experienced what they perceive as unjust closure of issues they've opened or have an interest in, and that absolutely isn't something that a) will happen, because the bot does not close issues, and b) we will ever _intend_ to do.\n\nas someone with busy personal and professional lives, and without infinite time to dedicate to deeply investigating each and every issue, it is _very_ useful to have this bot, which i treat (at the moment) as a sort of queue. it brings my attention to issues that need to be addressed and triaged. that's especially helpful in this project, because there are issues (like this one) that are several years old, with long threads, and potentially some feature work that has been done. it can take a while to really gain the full context of an issue, and getting batches of 3-4 at a time feels like a manageable way to approach it.\n\ni care _very_ deeply about making `git-bug` more accessible, error-free, and (maybe, possibly, hopefully) a source of truth for not only people who want to use `git-bug`, but other issue management platforms as well. that's the future i wish to build, in a nutshell. the statements you've made about the stance of maintainers that implement a stale bot are **just plain wrong**, at least in this case (and i'd wager, in the bulk of others, as well).\n\n\u003e (later) He is not dead yet!\n\ni see absolutely no reason to remove the stale bot configuration: it does not close issues, it simply applies labels them, which **helps the maintainers (or at least, me)** figure out where to put my attention the next time i'm looking through issues.\n\n---\n\n@arcanemachine, to address the original issue comment/feature suggestion, i think @smoyer64 addressed this, but just to weigh in:\n\ngit-bug is of the mindset that _it_, and _its_ issues, are the source of truth. when you pull from a bridge, git-bug creates its own issues, because that's what it shows when you list issues with git-bug's CLI or TUI/WUI client. when you push to a bridge, you're taking the local git-bug issues and doing the inverse: \"copying\" (or editing) them out to the remote service provider.\n\nto accomplish your goal - getting issues on a new machine - all you need to do is have pushed the issues up to the git remote, and pull those on the local machine. as you indicated in another follow-up comment, yes, currently, the first thing you should do on a secondary machine is adopt your pre-existing identity from the git remote. at the moment, this workflow needs some work, and that's on my plate for an `0.8.x`-ish release (there is no timeline i can give you at the moment). i've left comments on https://github.com/git-bug/git-bug/issues/1003 with instructions for how to manually fetch the identity with both the old `0.8.0` release, or if you're building at `HEAD` (or with the soon-to-come `0.8.1` release) -- it _does_ differ slightly because of changes to `git-bug`'s commands.\n\n---\n\n@mcepl \n\n\u003e JSON files are easier to back up, and also it adds robustness for the situations when git-bug is broken, and it is not possible to migrate from higher to lower version. Like https://github.com/MichaelMure/git-bug/issues/719#issuecomment-1998087613.\n\ni'm not sure i understand your statement here. if the issues exist on _any_ remote (remember, `git` is a _distributed_ version control system), git-bug could be broken, uninstalled, unavailable to build (including all prior releases), and you could still _fetch_ and _push_ your issues.","files":null},{"type":6,"timestamp":1745209704,"nonce":"GhQaX/OCqoJEEl24zNmZLi4y3xM=","metadata":{"github-id":"UCE_lALOCGKeh86n8TpbzmQOVH0"},"target":"1e4f898e899a41f31294edecda61d96e6ab334230715037cd3c42848b61c53e4","message":"\u003e I hate this GitHub bot, and it seems hugely disrespectful to your users to use it.\n\u003e ...\n\u003e There is absolutely no reason for this bot to ever exist. Its only purpose is to hide existing bugs and pretend that the project is in much better shape than it actually is. There is zero cost of having open bugs, we have plenty of integers for new ones, maintainer just wants to show that he/she doesn’t care about their users, and it is more important for them to look like there are no problems than to actually help their users or even to encourage them to help each other.\n\ni added the configuration for the stale bot.\n\nthis bot is not closing issues. it's more of a \"heads up\", pay attention to this\". the _initial_ configuration was set to automatically close issues, but this was quickly adjusted due to user feedback (i think within 24 hours, but this number is just off the top of my head).\n\nas an example of how it's helpful:\n\ni vaguely recall seeing this title, likely from skimming through the issues a few months ago to see if i wanted to pull anything else into `0.8.1`, but the email i got tonight because the bot commented and rotated it brought it directly to my attention - and if i didn't get an email, that'd be fine too - because for planning purposes, being able to search `label:lifecycle/stale` or `label:lifecycle/rotten` to see if anything has fallen through the cracks is _incredibly_ helpful.\n\nother, larger projects with corporate backing and larger teams often use issue inactivity to close or even lock issues using stale bot or something else. for them, that can be helpful to reduce the \"infinite backlog\" that an accumulate -- and that's something that applies to this project, too.\n\ni can only assume that people who are adamantly against this sort of automation have experienced what they perceive as unjust closure of issues they've opened or have an interest in, and that absolutely isn't something that a) will happen, because the bot does not close issues, and b) we will ever _intend_ to do.\n\nas someone with busy personal and professional lives, and without infinite time to dedicate to deeply investigating each and every issue, it is _very_ useful to have this bot, which i treat (at the moment) as a sort of queue. it brings my attention to issues that need to be addressed and triaged. that's especially helpful in this project, because there are issues (like this one) that are several years old, with long threads, and potentially some feature work that has been done. it can take a while to really gain the full context of an issue, and getting batches of 3-4 at a time feels like a manageable way to approach it.\n\ni care _very_ deeply about making `git-bug` more accessible, error-free, and (maybe, possibly, hopefully) a source of truth for not only people who want to use `git-bug`, but other issue management platforms as well. that's the future i wish to build, in a nutshell. the statements you've made about the stance of maintainers that implement a stale bot are **just plain wrong**, at least in this case (and i'd wager, in the bulk of others, as well).\n\n\u003e (later) He is not dead yet!\n\ni see absolutely no reason to remove the stale bot configuration: it does not close issues, it simply applies labels to them, which **helps the maintainers (or at least, me)** figure out where to put my attention the next time i'm looking through issues.\n\n---\n\n@arcanemachine, to address the original issue comment/feature suggestion, i think @smoyer64 addressed this, but just to weigh in:\n\ngit-bug is of the mindset that _it_, and _its_ issues, are the source of truth. when you pull from a bridge, git-bug creates its own issues, because that's what it shows when you list issues with git-bug's CLI or TUI/WUI client. when you push to a bridge, you're taking the local git-bug issues and doing the inverse: \"copying\" (or editing) them out to the remote service provider.\n\nto accomplish your goal - getting issues on a new machine - all you need to do is have pushed the issues up to the git remote, and pull those on the local machine. as you indicated in another follow-up comment, yes, currently, the first thing you should do on a secondary machine is adopt your pre-existing identity from the git remote. at the moment, this workflow needs some work, and that's on my plate for an `0.8.x`-ish release (there is no timeline i can give you at the moment). i've left comments on https://github.com/git-bug/git-bug/issues/1003 with instructions for how to manually fetch the identity with both the old `0.8.0` release, or if you're building at `HEAD` (or with the soon-to-come `0.8.1` release) -- it _does_ differ slightly because of changes to `git-bug`'s commands.\n\n---\n\n@mcepl \n\n\u003e JSON files are easier to back up, and also it adds robustness for the situations when git-bug is broken, and it is not possible to migrate from higher to lower version. Like https://github.com/MichaelMure/git-bug/issues/719#issuecomment-1998087613.\n\ni'm not sure i understand your statement here. if the issues exist on _any_ remote (remember, `git` is a _distributed_ version control system), git-bug could be broken, uninstalled, unavailable to build (including all prior releases), and you could still _fetch_ and _push_ your issues.","files":null},{"type":6,"timestamp":1745209862,"nonce":"Uh0fMXFYLiZvHckLfv4DPXyOPio=","metadata":{"github-id":"UCE_lALOCGKeh86n8TpbzmQOW2A"},"target":"1e4f898e899a41f31294edecda61d96e6ab334230715037cd3c42848b61c53e4","message":"\u003e I hate this GitHub bot, and it seems hugely disrespectful to your users to use it.\n\u003e ...\n\u003e There is absolutely no reason for this bot to ever exist. Its only purpose is to hide existing bugs and pretend that the project is in much better shape than it actually is. There is zero cost of having open bugs, we have plenty of integers for new ones, maintainer just wants to show that he/she doesn’t care about their users, and it is more important for them to look like there are no problems than to actually help their users or even to encourage them to help each other.\n\ni added the configuration for the stale bot.\n\nthis bot is not closing issues. it's more of a \"heads up\", pay attention to this\". the _initial_ configuration was set to automatically close issues, but this was quickly adjusted due to user feedback (i think within 24 hours, but this number is just off the top of my head).\n\nas an example of how it's helpful:\n\ni vaguely recall seeing this title, likely from skimming through the issues a few months ago to see if i wanted to pull anything else into `0.8.1`, but the email i got tonight because the bot commented and rotated it brought it directly to my attention - and if i didn't get an email, that'd be fine too - because for planning purposes, being able to search `label:lifecycle/stale` or `label:lifecycle/rotten` to see if anything has fallen through the cracks is _incredibly_ helpful.\n\nother, larger projects with corporate backing and larger teams often use issue inactivity to close or even lock issues using stale bot or something else. for them, that can be helpful to reduce the \"infinite backlog\" that an accumulate -- and that's something that applies to this project, too.\n\ni can only assume that people who are adamantly against this sort of automation have experienced what they perceive as unjust closure of issues they've opened or have an interest in, and that absolutely isn't something that a) will happen, because the bot does not close issues, and b) we will ever _intend_ to do.\n\nas someone with busy personal and professional lives, and without infinite time to dedicate to deeply investigating each and every issue, it is _very_ useful to have this bot, which i treat (at the moment) as a sort of queue. it brings my attention to issues that need to be addressed and triaged. that's especially helpful in this project, because there are issues (like this one) that are several years old, with long threads, and potentially some feature work that has been done. it can take a while to really gain the full context of an issue, and getting batches of 3-4 at a time feels like a manageable way to approach it.\n\ni care _very_ deeply about making `git-bug` more accessible, error-free, and (maybe, possibly, hopefully) a source of truth for not only people who want to use `git-bug`, but other issue management platforms as well. that's the future i wish to build, in a nutshell. the statements you've made about the stance of maintainers that implement a stale bot are **just plain wrong**, at least in this case (and i'd wager, in the bulk of others, as well).\n\n\u003e (later) He is not dead yet!\n\ni see absolutely no reason to remove the stale bot configuration: it does not close issues, it simply applies labels to them, which **helps the maintainers (or at least, me)** figure out where to put my attention the next time i'm looking through issues.\n\n---\n\n@arcanemachine, to address the original issue comment/feature suggestion, i think @smoyer64 addressed this, but just to weigh in:\n\ngit-bug is of the mindset that _it_, and _its_ issues, are the source of truth. when you pull from a bridge, git-bug creates its own issues, because that's what it shows when you list issues with git-bug's CLI or TUI/WUI client. when you push to a bridge, you're taking the local git-bug issues and doing the inverse: \"copying\" (or editing) them out to the remote service provider.\n\nto accomplish your goal - getting issues on a new machine - all you need to do is have pushed the issues up to the git remote, and pull those on the local machine. as you indicated in another follow-up comment, yes, currently, the first thing you should do on a secondary machine is adopt your pre-existing identity from the git remote. at the moment, this workflow needs some work, and that's on my plate for an `0.8.x`-ish release (there is no timeline i can give you at the moment). i've left comments on https://github.com/git-bug/git-bug/issues/1003 with instructions for how to manually fetch the identity with both the old `0.8.0` release, or if you're building at `HEAD` (or with the soon-to-come `0.8.1` release) -- it _does_ differ slightly because of changes to `git-bug`'s commands.\n\n---\n\n@mcepl \n\n\u003e JSON files are easier to back up, and also it adds robustness for the situations when git-bug is broken, and it is not possible to migrate from higher to lower version. Like https://github.com/MichaelMure/git-bug/issues/719#issuecomment-1998087613.\n\ni'm not sure i understand your statement here. if the issues exist on _any_ remote (remember, `git` is a _distributed_ version control system), git-bug could be broken, uninstalled, unavailable to build (including all prior releases), and you could still _fetch_ and _push_ your issues. additionally, if git-bug were broken in two different releases and you were blocked, i'm not sure how a JSON export would help. can you clarify this?","files":null},{"type":5,"timestamp":1745210316,"nonce":"/Se8Yqctp8p1doOfDg4E5zqgVDY=","metadata":{"github-id":"UNLE_lADOCGKeh85lROrOzwAAAAQJLWKI"},"added":[],"removed":["lifecycle/rotten"]},{"type":5,"timestamp":1745210316,"nonce":"Ie4zEhWEiAUWZ2+coRWNFT56KJ0=","metadata":{"github-id":"LE_lADOCGKeh85lROrOzwAAAAQJLWKO"},"added":["kind/feature"],"removed":[]},{"type":5,"timestamp":1745210316,"nonce":"6RGuTugY+TtFWXCHZtzB5Gr8ZJI=","metadata":{"github-id":"LE_lADOCGKeh85lROrOzwAAAAQJLWKV"},"added":["triage/needs-priority"],"removed":[]},{"type":5,"timestamp":1745210316,"nonce":"qi36h03nEBUZJif6mCK2AOCAZsQ=","metadata":{"github-id":"LE_lADOCGKeh85lROrOzwAAAAQJLWKd"},"added":["triage/needs-information"],"removed":[]},{"type":5,"timestamp":1745210316,"nonce":"AhP2tzL73oGeAH2P+0oSiuzg7vk=","metadata":{"github-id":"LE_lADOCGKeh85lROrOzwAAAAQJLWKi"},"added":["triage/needs-approval"],"removed":[]},{"type":5,"timestamp":1745210316,"nonce":"b+CUQ/zwQsdNp7veE6ZFS4kdKj8=","metadata":{"github-id":"LE_lADOCGKeh85lROrOzwAAAAQJLWKr"},"added":["area/serialization"],"removed":[]},{"type":3,"timestamp":1745210786,"nonce":"ftXBwjx2NU6fp7CQPNiLeSnsUYA=","metadata":{"github-id":"IC_kwDOCGKeh86n8Xra","github-url":"https://github.com/git-bug/git-bug/issues/1065#issuecomment-2817620698"},"message":"i thought of a use case i wasn't thinking of earlier: bulk issue creation.\n\nother than importing issues from a third party source (bridge), we don't currently have a way to create issues en masse. i'm not sure i think JSON is the right data format for doing this, but i can totally see the need for a bulk import, and since we export JSON, importing it makes sense.","files":null},{"type":6,"timestamp":1745210870,"nonce":"z30xpYnYGucW4fmzsZV9bRfUKEQ=","metadata":{"github-id":"UCE_lALOCGKeh86n8XrazmQOiks"},"target":"5ebf1fb9c460bbf226ab4044e7454488bc9265a462fbd50bdf574fd55e63846e","message":"i thought of a use case i wasn't thinking of earlier: bulk issue creation.\n\nother than importing issues from a third party source (bridge), we don't currently have a way to create issues en masse (without requiring the user to `for f in $FILES; do git bug new --file; done`, but we could make it more ergonomic for sure). i'm not sure i think JSON is the right data format for doing this, but i can totally see the need for a bulk import, and since we export JSON, importing it makes sense.","files":null},{"type":6,"timestamp":1745211008,"nonce":"w/qofzC22wOQwQZRz+y0GvPJVIg=","metadata":{"github-id":"UCE_lALOCGKeh86n8XrazmQOkLE"},"target":"5ebf1fb9c460bbf226ab4044e7454488bc9265a462fbd50bdf574fd55e63846e","message":"i thought of a use case i wasn't thinking of earlier: bulk issue creation.\n\nother than importing issues from a third party source (bridge), we don't currently have a way to create issues en masse (without requiring the user to `for f in $FILES; do git bug new --file \"$f\"; done`, but we could make it more ergonomic for sure). i'm not sure i think JSON is the right data format for doing this, but i can totally see the need for a bulk import, and since we export JSON, importing it makes sense.","files":null},{"type":5,"timestamp":1745210930,"nonce":"x0iwmfCgCAxRLR4m9OY7hwvIlNg=","metadata":{"github-id":"UNLE_lADOCGKeh85lROrOzwAAAAQJLojQ"},"added":[],"removed":["triage/needs-priority"]},{"type":5,"timestamp":1745210930,"nonce":"gb6a+9GJFUUmN3dcASRHjHy61No=","metadata":{"github-id":"UNLE_lADOCGKeh85lROrOzwAAAAQJLojR"},"added":[],"removed":["triage/needs-information"]},{"type":5,"timestamp":1745210930,"nonce":"PPW/Bs4oeGNS5A3AUnJlBwQ0eQU=","metadata":{"github-id":"LE_lADOCGKeh85lROrOzwAAAAQJLojV"},"added":["lifecycle/frozen"],"removed":[]},{"type":5,"timestamp":1745210930,"nonce":"A1pfygciHoDsxCkSNj4jEJ1+zHY=","metadata":{"github-id":"LE_lADOCGKeh85lROrOzwAAAAQJLojb"},"added":["priority/backlog"],"removed":[]},{"type":5,"timestamp":1745210943,"nonce":"kvKi4Aa94Fb/3t1U18PYcdxhHlM=","metadata":{"github-id":"UNLE_lADOCGKeh85lROrOzwAAAAQJLpAj"},"added":[],"removed":["triage/needs-approval"]},{"type":5,"timestamp":1745210943,"nonce":"JvmeWvLM1rhqzIApNo8lxJsEmW0=","metadata":{"github-id":"LE_lADOCGKeh85lROrOzwAAAAQJLpAo"},"added":["triage/accepted"],"removed":[]}]}