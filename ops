{"author":{"id":"3998add589f6a09cf4bdf0e85e5481d2c48b8a757edd699a79a0c929ab5005db"},"ops":[{"type":3,"timestamp":1553463177,"nonce":"e3UZJL+RtzJcTt7YSw7x14fOmgg=","metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQ3NjAwMjQyNw==","github-url":"https://github.com/git-bug/git-bug/issues/105#issuecomment-476002427"},"message":"\u003e Why store deltas instead of snapshots?\n\nEssentially, it boils down to this: git-bug is a bug tracker and git is a code/content tracker. Those are two different problems and should be considered individually to see what properties are desired and what tradeoff can or has to be made.\n\nOn the subject you are mentioning, there is a key distinction in the desired properties: while with a content tracker you want to have absolute control on the **result** and are willing to deal with manual merge and conflict resolution to achieve that, with a bug tracker you care about the **intent of the participating users**. Said otherwise, it's not a huge problem if merging two bug states doesn't go exactly as expected, as long as what each actors wanted is clear and visible (that is, each changes will be clearly mentioned in the timeline).\n\nThat means that a different tradeoff can/should be made. In this case, it's more interesting (at least imho) to have a low friction tool that does the merging autonomously, where we can have a free collaboration without even thinking about the internals of the tools as you have to with git (\"should I rebase or merge here ?\"), that anybody, even non developers can use (that is, users).\n\nSo what happen if git-bug does get a merge wrong ? Let say Alice change the status of a bug to some value and Bob change it another way. If the merge fail somehow, we end up with the wrong status, but we see who wanted what. It's a simple matter of changing the status again to fix the situation. The conflict resolution is explicit (that's a feature) in the timeline while it would have been hidden in a git like process.\n\nAlso, note one thing: bug edition is a slow process (there is usually at least hours between each event), and the events where a bad merge could be a problem (say labels or status) are usually done by a single actor, the maintainer or the developer working on the problem. I expect this merging problem to be quite rare in practice.\n\nIf you accept that this is the behavior you want for a bug tracker, then storing delta instead of snapshots makes more sense.\n\nI'll explain another part of that tradeoff below.\n\n\u003e This reads like it will apply remote changes on top of mine and always override what I had.\n\nIt's the other way around. When pulling the latest state from the remote, you apply your newly made changes on top.\n\nThat's part of the design/tradeoff explained above. When you made some changes offline or without being up to date with the discussion, git-bug will tell you that there was a potential conflict. The nice thing is that you are also the best person to figure out if that was merged properly so you are able to fix a bad merge if needed.","files":null},{"type":5,"timestamp":1553463194,"nonce":"eFodbvhy0QfUVLzZx4wEMOgzxqc=","metadata":{"github-id":"MDEyOkxhYmVsZWRFdmVudDIyMjUwOTA5NjU="},"added":["Non-actionable"],"removed":[]}]}