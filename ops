{"author":{"id":"d82e3b0277388fab1285e702dfba0ce3b709e1919233977abaeab636c4c57550"},"ops":[{"type":3,"timestamp":1666613092,"nonce":"lNj3b0IBEqvRDRRbYYUQQssNxhI=","metadata":{"github-id":"IC_kwDOCGKeh85M045b","github-url":"https://github.com/git-bug/git-bug/issues/867#issuecomment-1288932955"},"message":"That' eerily similar to what I was typing in a new issue (presuming this one is closed with the \"quick\" fix).  For reference, this behavior also needs to be passed through the caching layer at:\n\nhttps://github.com/MichaelMure/git-bug/blob/55a2e8e4485fe63fbda759540958c7190dfeb85c/cache/repo_cache_common.go#L76-L88\n\nI'd suggest that we also pass the entity \"type\" with each `BuildEvent` and define this type at the core (maybe as `RemoteEvent` instead?).  `RepoCache.Fetch` can loop through Identities, Bugs, PRs, Boards and the events can simply be merged into the output of `func (c *RepoCache) Fetch(remote string) chan BuildEvent`.\n\nWith a little care, we can use the Scatter-Gather pattern to execute the remote fetches in parallel too but the UIs would need to know that there's no guarantee on the ordering.  Of course, if executed sequentially, the UIs still need to know the type of an entity to present something meaningful to the user.","files":null},{"type":6,"timestamp":1666613461,"nonce":"FeciiWhmuQ6au24cm7c48fZcbsY=","metadata":{"github-id":"UCE_lALOCGKeh85M045bziiyqH8"},"target":"cc6ceb2c4bada34cf4afac319b5237888783fd90c3d3c06e784da750f339a32f","message":"That's eerily similar to what I was typing in a new issue (presuming this one is closed with the \"quick\" fix).  For reference, this behavior also needs to be passed through the caching layer at:\n\nhttps://github.com/MichaelMure/git-bug/blob/55a2e8e4485fe63fbda759540958c7190dfeb85c/cache/repo_cache_common.go#L76-L88\n\nI'd suggest that we also pass the entity \"type\" with each `BuildEvent` and define this type at the core (maybe as `RemoteEvent` instead?).  `RepoCache.Fetch` can loop through Identities, Bugs, PRs, Boards and the events can simply be merged into the output of `func (c *RepoCache) Fetch(remote string) chan BuildEvent`.\n\nWith a little care, we can use the Scatter-Gather pattern to execute the remote fetches in parallel too but the UIs would need to know that there's no guarantee on the ordering.  Of course, if executed sequentially, the UIs still need to know the type of an entity to present something meaningful to the user.","files":null}]}