{"author":{"id":"3808bfa438fd7b056acce86e4658ff96e85beb14d0c10b40ef87b11c0a3834ee"},"ops":[{"type":3,"timestamp":1540745977,"nonce":"PLo+NVmAP5SYyjYW+Zqbu/UxRTs=","metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDQzMzcyMjUyOQ==","github-url":"https://github.com/git-bug/git-bug/issues/53#issuecomment-433722529"},"message":"Hi,\n\nApology for the late reply.\n\nThanks for the questions. Please allow me to start with our situation with git-bug:\n\nI am imagining git-bug to become the source of truth for bug/track/issue threads and communications internally at our company.\n\nMoreover, I found the idea of storing text-based information as git objects particular interesting in use cases where close interaction with git commits/branches/tags is required. This could include gerrit, git-bug, jenkins, kubernetes, etc. (details omitted for brevity, would like to expatiate upon request).\n\nCurrently two main blockers with going all-in with git-bug:\n  1. **Lack of formatting and linting tools such as formatters, linters, and templates**. Otherwise we have no guarantee \n  2. **git-bug commits got garbage collected on GitHub**. We host our own internal git server. Either way, there has to be some level of support from the server side to correctly identify commit objects managed by git-bug and not to delete them.\n\nI like the idea of using command line + git objects to share and track bugs and issues.  As of this writing, we are ready to use `git-bug` (already secretly deployed to every developer's desktop under `$PATH`), provided that the above two issues are resolved.","files":null}]}