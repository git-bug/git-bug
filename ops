{"author":{"id":"d82e3b0277388fab1285e702dfba0ce3b709e1919233977abaeab636c4c57550"},"ops":[{"type":3,"timestamp":1654434997,"nonce":"KVnmOZL1Rc2wpDktPjAcRcgytFM=","metadata":{"github-id":"IC_kwDOCGKeh85EWtL0","github-url":"https://github.com/git-bug/git-bug/issues/810#issuecomment-1146802932"},"message":"Agreed - the first is trivial to solve.  I'm a fan of fewer mutexes when possible so I've submitted #812 as an alternative to #811 (I should have done this yesterday but was fixated on solving the second one.)\n\nAs you noted, the second is much harder (and, being unfamiliar with the code, it's taken longer to understand.)  One common solution is to make one of the go routines control the other - passing a signal for the controlled go routine that it should exit.  Sometimes when you see this pattern, it really indicates that you have two go routines where there should only be one.  I'll continue looking at it as I don't think I've studied it enough to grasp the full scope of both go routines.","files":null},{"type":6,"timestamp":1654436175,"nonce":"WBagk4i36PH+JzKYS4O0X3RzVfU=","metadata":{"github-id":"UCE_lALOCGKeh85EWtL0ziPhbDY"},"target":"b4bfdcaafe11baa7686cb34828603fd634339bcfe086cbc35835cc4888ad4af1","message":"I've submitted #812 as a way to solve the race issue with the Github bridge.  Curiously, I had confused the two race conditions (first versus second in your comment above) and found the second easier to solve :)","files":null},{"type":6,"timestamp":1654436206,"nonce":"Zi+cb3mMXO0vVwoWXxTaEKeUl4k=","metadata":{"github-id":"UCE_lALOCGKeh85EWtL0ziPhbHI"},"target":"b4bfdcaafe11baa7686cb34828603fd634339bcfe086cbc35835cc4888ad4af1","message":"I've submitted #812 as a way to solve the race issue with the Github bridge (an alternate solution to your #813).  Curiously, I had confused the two race conditions (first versus second in your comment above) and found the second easier to solve :)","files":null}]}