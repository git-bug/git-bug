{"author":{"id":"d82e3b0277388fab1285e702dfba0ce3b709e1919233977abaeab636c4c57550"},"ops":[{"type":3,"timestamp":1653305821,"nonce":"EXsz4PaRtVwhynhEpivMC0ydmRo=","metadata":{"github-id":"IC_kwDOCGKeh85DoAxs","github-url":"https://github.com/git-bug/git-bug/issues/704#issuecomment-1134562412"},"message":"@MichaelMure - Thanks so much for the response!  I've been following the model but hadn't seen the example you referenced.  Amazingly, I mostly got my Snapshot and Entity created correctly and appreciate that I can set the directory which holds the references (and that references are separated by the type of entity).  Right now, I'm just creating a CLI application so I don't have an issue with running in WASM (though I have written applications that run in a browser and that's an interesting side-project).\n\nThe example actually highlights my question about how to the underlying Git repository - the two lines at https://github.com/MichaelMure/git-bug/blob/650c11dcb68bfe00e2d399c5e1d337cae9c1bfeb/entity/dag/example_test.go#L345 will result in the Lamport clocks, indices and cache files being stored at `.git/git-bug`.  Using that one directory for all applications doesn't matter so much for the indices and cache files other than it clutters up git-bug's temporary space.  Sharing that directory for the Lamport clocks has the side-effect of any update to one application's data increasing the shared clocks.  This might matter as the clocks might seem to be arbitrarily advanced.  The path for `LocalStorage` in the git repository is hard-coded in three places in this file - https://github.com/MichaelMure/git-bug/blob/650c11dcb68bfe00e2d399c5e1d337cae9c1bfeb/repository/gogit.go#L75.\n\nI was also trying to reuse `RepoCache` (or parts of it) and it doesn't seem to be nearly as friendly to alternate entities.  I see obvious reasons for specialization in indexing but it seems like basic caching could also be made general (I previously would have said \"generic\") like the the underlying storage (repository).\n\nI see in the README that you're looking for help - at this point, I'm probably more adept with git-bug's core and CLI but could probably help with termui.  Thanks again for this amazing project ... I'm a convert from `bugs-everywhere` and the idea of distributed bug-tracking, PRs, gist (equivalents), etc will soon be considered mainstream.  Here's looking forward to the day when we stop using centralized \"hubs\" for with our distributed source repository.  And perhaps the ultimate in distributed sharing happens using IPFS or Hyperswarm.  At that point, git behaves more like Bittorrent and distributed file-sharing provides the trackers.","files":null}]}