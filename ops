{"author":{"id":"1c0be4c7efe4cf70011d270a87e33999699eb0e9a5b12f84e0369f90dae3dacd"},"ops":[{"type":3,"timestamp":1615416716,"nonce":"czO3Lsvtm2V3NskWyysU7oBYxrc=","metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDc5NjI2MDY4MA==","github-url":"https://github.com/git-bug/git-bug/issues/582#issuecomment-796260680"},"message":"@GlancingMind: thanks for testing!\n\nI used https://github.com/MichaelMure/git-bug/commit/501e1678b2af280300a4c35d762c54379e3142e4 from master to import the issues from https://github.com/pawamoy/aria2p and got a good result.\n\nhttps://github.com/pawamoy/aria2p/issues/70#issuecomment-721943308 looks good:\n\n```\nTimothée Mazzucotelli (pawamoy) commented on Sep 23 2020\n\n     OK so there's no way to tell the JSON-RPC daemon to add downloads using an input file with options?\n\n     We could consider adding the functionality in `aria2p` itself then. Something like an `API.add_input_file` method.\n\n\n Timothée Mazzucotelli (pawamoy) removed \"unconfirmed\" label on Sep 23 2020\n\n\n Timothée Mazzucotelli (pawamoy) added \"feature\" label on Sep 23 2020\n\n\n Timothée Mazzucotelli (pawamoy) added \"module:api\" label on Sep 23 2020\n\n\n jonnieey (jonnieey) commented on Oct 30 2020\n\n     @pawamoy Whats  would be the approach on this issue. I was thinking that one could provide an input file, which is parsed\n     to create objects  `{uri: URI , options : [OPTIONS]}`,  then pass them to the add method. Could this work or you had a\n     different idea on this?\n\n┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐\n│Timothée Mazzucotelli (pawamoy) commented on Nov 4 2020                                                                       │\n│                                                                                                                              │\n│    I think it's the right approach. I would see it like this:                                                                │\n│                                                                                                                              │\n│    - in `API`, add a `add_input_file` method that expects a file path as arguments, and contents that can be parsed (uris    │\n│    separated by newlines, with optional options between them, indented with at least one space)                              │\n│    - if there is a parsing error, raise an exception                                                                         │\n│    - in `API.add`, when adding as a file, first try to add as an input file, using `add_input_file`, and if an exception is  │\n│    raised, fallback on current behavior                                                                                      │\n│                                                                                                                              │\n│    Something like this:                                                                                                      │\n│                                                                                                                              │\n│    ```python                                                                                                                 │\n│        def add(self, uri: str) -\u003e List[Download]:                                                                            │\n│            ...                                                                                                               │\n│                                                                                                                              │\n│            if path_exists:                                                                                                   │\n│                if path.suffix == \".torrent\":                                                                                 │\n│                    new_downloads.append(self.add_torrent(path))                                                              │\n│                elif path.suffix == \".metalink\":                                                                              │\n│                    new_downloads.extend(self.add_metalink(path))                                                             │\n│                else:                                                                                                         │\n│                    try:                                                                                                      │\n│                        new_downloads.extend(self.add_input_file(path))                                                       │\n│                    except ValueError:                                                                                        │\n│                        for line in read_lines(path):                                                                         │\n│                            if line:                                                                                          │\n│                                new_downloads.extend(self.add(line))                                                          │\n│            ...                                                                                                               │\n│    ```                                                                                                                       │\n└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘\n```\n\nand https://github.com/pawamoy/aria2p/issues/68 ends in the right comment:\n```\n┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐\n│Timothée Mazzucotelli (pawamoy) commented on Feb 18 2021                                                                      │\n│                                                                                                                              │\n│    Dang I forgot about this :expressionless:                                                                                 │\n│                                                                                                                              │\n│    I will try to find some time soon to fix it (and I saved this in my notifications this time, to not forget).              │\n└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘\n```","files":null},{"type":3,"timestamp":1615417430,"nonce":"yR6BlNnutmJuMdqR1JL4ekky2CQ=","metadata":{"github-id":"MDEyOklzc3VlQ29tbWVudDc5NjI2Nzg5OQ==","github-url":"https://github.com/git-bug/git-bug/issues/582#issuecomment-796267899"},"message":"The AUR also has a package [git-bug-git](https://aur.archlinux.org/packages/git-bug-git/) which AFAIU installs git-bug from its master branch. (Confusingly the AUR version number of this package is 0.7.1.r21.g5029cc1e-1 which looks very similar to the release 0.7.1 .) @pawamoy: Would it work for you to use that package?","files":null}]}