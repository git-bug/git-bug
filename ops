{"author":{"id":"d82e3b0277388fab1285e702dfba0ce3b709e1919233977abaeab636c4c57550"},"ops":[{"type":1,"timestamp":1672758523,"nonce":"gYlP+wq96fsnTTfNtwXsBIWxPwk=","metadata":{"github-id":"I_kwDOCGKeh85ac43-","github-url":"https://github.com/git-bug/git-bug/issues/975","origin":"github"},"title":"Critical security vulnerabilities in Go's standard library","message":"Go v1.19.4 is required to resolve all the security vulnerabilities listed by `govulncheck`:\n\n```\ngovulncheck ./... \ngovulncheck is an experimental tool. Share feedback at https://go.dev/s/govulncheck-feedback.\n\nScanning for dependencies with known vulnerabilities...\nFound 3 known vulnerabilities.\n\nVulnerability #1: GO-2022-1144\n  An attacker can cause excessive memory growth in a Go server\n  accepting HTTP/2 requests. HTTP/2 server connections contain a\n  cache of HTTP header keys sent by the client. While the total\n  number of entries in this cache is capped, an attacker sending\n  very large keys can cause the server to allocate approximately\n  64 MiB per open connection.\n\n  Call stacks in your code:\n      commands/webui.go:194:26: github.com/MichaelMure/git-bug/commands.runWebUI calls net/http.Server.ListenAndServe\n\n  Found in: net/http@go1.18.6\n  Fixed in: net/http@go1.19.4\n  More info: https://pkg.go.dev/vuln/GO-2022-1144\n\nVulnerability #2: GO-2022-0969\n  HTTP/2 server connections can hang forever waiting for a clean\n  shutdown that was preempted by a fatal error. This condition can\n  be exploited by a malicious client to cause a denial of service.\n\n  Call stacks in your code:\n      commands/webui.go:194:26: github.com/MichaelMure/git-bug/commands.runWebUI calls net/http.Server.ListenAndServe\n\n  Found in: net/http@go1.18.6\n  Fixed in: net/http@go1.19.1\n  More info: https://pkg.go.dev/vuln/GO-2022-0969\n\nVulnerability #3: GO-2022-1039\n  Programs which compile regular expressions from untrusted\n  sources may be vulnerable to memory exhaustion or denial of\n  service. The parsed regexp representation is linear in the size\n  of the input, but in some cases the constant factor can be as\n  high as 40,000, making relatively small regexps consume much\n  larger amounts of memory. After fix, each regexp being parsed is\n  limited to a 256 MB memory footprint. Regular expressions whose\n  representation would use more space than that are rejected.\n  Normal use of regular expressions is unaffected.\n\n  Call stacks in your code:\n      repository/index_bleve.go:115:28: github.com/MichaelMure/git-bug/repository.bleveIndex.Search calls github.com/blevesearch/bleve.indexImpl.Search, which eventually calls regexp/syntax.Parse\n\n  Found in: regexp/syntax@go1.18.6\n  Fixed in: regexp/syntax@go1.19.2\n  More info: https://pkg.go.dev/vuln/GO-2022-1039\n\n=== Informational ===\n\nThe vulnerabilities below are in packages that you import, but your code\ndoesn't appear to call any vulnerable functions. You may not need to take any\naction. See https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck\nfor details.\n\nVulnerability #1: GO-2022-0988\n  JoinPath and URL.JoinPath do not remove ../ path elements appended to a relative path. For example, JoinPath(\"https://go.dev\", \"../go\") returns the URL \"https://go.dev/../go\", despite the JoinPath documentation stating that ../ path elements are removed from the result.\n  Found in: net/url@go1.18.6\n  Fixed in: net/url@go1.19.1\n  More info: https://pkg.go.dev/vuln/GO-2022-0988\n```","files":null}]}