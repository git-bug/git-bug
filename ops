{"author":{"id":"4d85ccdde3ad47c902de21b580354b67ed0cb07caa04e32d04ea93112f7f027e"},"ops":[{"type":5,"timestamp":1745815027,"nonce":"h4BM7E79tVtlrxzHajt0XacS1/w=","metadata":{"github-id":"UNLE_lADOCGKeh86WjkTdzwAAAAQOuEFo"},"added":[],"removed":["lifecycle/idle-auto"]},{"type":3,"timestamp":1745818160,"nonce":"U1e1AE6sSnXjuvfxjbKvk1eT+SE=","metadata":{"github-id":"IC_kwDOCGKeh86o673X","github-url":"https://github.com/git-bug/git-bug/issues/1268#issuecomment-2834021847"},"message":"I'll try to provide some clarity here:\n\n- Your initial issue seems to have been caused by an expectation that `git bug bridge rm` took the bridge ID instead of name, as you later discovered. I agree that this shines light on a poor UX, and that `git-bug-bridge-rm` should probably take the ID, to align with other commands -- although supporting both would be doable for now (until a future in which two bridges to the same external platform are supported)\n- The `invalid key prefix` message is shown when attempting to remove the bridge configuration from the local git configuration file (`$GIT_DIR/config`), if the section doesn't exist. Did you manually remove the bridge section? I don't think `git-bug` should care if the config section it's trying to remove doesn't exist.\n- Regarding multiple identities: when importing from a bridge, identities are created to account for user actions which do not map to current git-bug users.\n- To manually remove the identities, you'd need to `rm -r .git/refs/identities` -- but you should prefer using `git bug wipe` instead.\n\nRegarding the \"empty commits\" you're seeing, let's first review what the `--all` flag does to `git-log`:\n\n```\n--all\n                                                                                                      \n    Pretend as if all the refs in refs/, along with HEAD, are listed on the command line as \u003ccommit\u003e.\n```\n\n`git-bug` creates objects for issues, which end up getting stored under the `refs/bugs` namespace, with identities being stored under the `refs/identities` namespace. `git-log --all` will thus show these refs as empty, authorless commits.","files":null}]}