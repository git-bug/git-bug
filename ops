{"author":{"id":"3998add589f6a09cf4bdf0e85e5481d2c48b8a757edd699a79a0c929ab5005db"},"ops":[{"type":3,"timestamp":1668945060,"nonce":"mYDpJkrZcaHlijZFzzgV7P4R8AQ=","metadata":{"github-id":"IC_kwDOCGKeh85OvpBl","github-url":"https://github.com/git-bug/git-bug/issues/530#issuecomment-1321111653"},"message":"I happen to have worked on this recently: https://github.com/MichaelMure/git-bug/tree/cli-reorg\n\nThe main goal was to make space for new entities (in that case [board](https://github.com/MichaelMure/git-bug/pull/843)), which means moving all `bug` related commands to a new `bug` root command, but I also ended up reorganizing the CLI to be uniform, following these conventions:\n```\nCLI commands should consistently follow this pattern:\n\nxxx                 --\u003e list xxx things if list, otherwise show one\nxxx new             --\u003e create thing\nxxx rm              --\u003e delete thing\nxxx show ID         --\u003e show one\nxxx show            --\u003e show one with \"select\" implied ID\nxxx yyy             --\u003e action commands for that thing, or subcommand\nxxx select|deselect --\u003e select/deselect implied ID\n```\n\nThis is the result:\n```\ngit-bug\ngit-bug bridge\ngit-bug bridge auth\ngit-bug bridge auth add-token [TOKEN] [flags]\ngit-bug bridge auth rm BRIDGE_ID\ngit-bug bridge auth show\ngit-bug bridge new [flags]\ngit-bug bridge pull [NAME] [flags]\ngit-bug bridge push [NAME]\ngit-bug bridge rm NAME\ngit-bug bug [QUERY] [flags]\ngit-bug bug comment [BUG_ID]\ngit-bug bug comment edit [COMMENT_ID] [flags]\ngit-bug bug comment new [BUG_ID] [flags]\ngit-bug bug deselect\ngit-bug bug label [BUG_ID]\ngit-bug bug label new [BUG_ID] LABEL...\ngit-bug bug label rm [BUG_ID] LABEL...\ngit-bug bug new [flags]\ngit-bug bug rm BUG_ID\ngit-bug bug select BUG_ID\ngit-bug bug show [BUG_ID] [flags]\ngit-bug bug status [BUG_ID]\ngit-bug bug status close [BUG_ID]\ngit-bug bug status open [BUG_ID]\ngit-bug bug title [BUG_ID]\ngit-bug bug title edit [BUG_ID] [flags]\ngit-bug commands [flags]\ngit-bug label\ngit-bug pull [REMOTE]\ngit-bug push [REMOTE]\ngit-bug termui\ngit-bug user [flags]\ngit-bug user adopt USER_ID\ngit-bug user new [flags]\ngit-bug user user show [USER_ID] [flags]\ngit-bug version [flags]\ngit-bug webui [flags]\n```\n```\n./git-bug --help\ngit-bug is a bug tracker embedded in git.\n\ngit-bug use git objects to store the bug tracking separated from the files\nhistory. As bugs are regular git objects, they can be pushed and pulled from/to\nthe same git remote you are already using to collaborate with other people.\n\nUsage:\n  git-bug [flags]\n  git-bug [command]\n\nEntities\n  bug         List bugs\n  label       List valid labels\n  user        List identities\n\nUser interfaces\n  termui      Launch the terminal UI\n  webui       Launch the web UI\n\nInteraction with the outside world\n  bridge      List bridges to other bug trackers\n  pull        Pull updates from a git remote\n  push        Push updates to a git remote\n\nAdditional Commands:\n  commands    Display available commands.\n  completion  Generate the autocompletion script for the specified shell\n  help        Help about any command\n  version     Show git-bug version information\n\nFlags:\n  -h, --help   help for git-bug\n\nUse \"git-bug [command] --help\" for more information about a command.\n```\n\nNow ... the remaining conundrum is whether or not to integrate as `git` subcommands. As you can see in the previous listing, integrating those commands within git range from useful/non-colliding (bug, user, label) to confusing (commands, completion, termui, webui, bridge), to downright colliding (help, version, push, pull).\n\nAt this point I'm kinda leaning to ship those commands in a separate binary (`gb` bug the name is debatable, can't be `git-bug` though), and have an optional subset of shell wrapper (`git-bug` --\u003e `gb bug $@`, `git-user` --\u003e `gb user $@`) to integrate only the most useful and non-confusing commands.\n\nIt's not a prefect plan though and does feel a bit half-assed. Additionally, it does not solve the colliding problem of `push`/`pull`, which are pretty important commands for git-bug.","files":null}]}