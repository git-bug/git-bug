{"author":{"id":"4d85ccdde3ad47c902de21b580354b67ed0cb07caa04e32d04ea93112f7f027e"},"ops":[{"type":3,"timestamp":1746840074,"nonce":"DtL/nXTHMoYjuurOmj3J9/lj6Cw=","metadata":{"github-id":"IC_kwDOCGKeh86q9S1-","github-url":"https://github.com/git-bug/git-bug/issues/1139#issuecomment-2868194686"},"message":"thanks for stepping through those commands!\n\nunfortunately, there isn't anything i can see that indicates custom configuration that would potentially lead to an issue with git-bug. i have (effectively) the same exact configuration, save for a `insteadOf` directive that rewrites `git@github.com:` to the fully-qualified `ssh://git@github.com/` -- but in my earlier comment, the test was performed with this disabled.\n\ni also use gpg-agent as ssh-agent, and if my key is not cached when i run `git-bug-pull`, i'm prompted to enter my passphrase -- if my key is cached, the cache entry is used and i authenticate successfully to the remote.\n\ni'm at a bit of a loss as to why you are experiencing this issue. these next suggestions may be a bit more involved, but would help validate (or provide steps to reproduce) your issue. i'll provide some reproducible steps below.\n\n---\n\ni'd recommend doing this in a container to provide a decent level of isolation. i'll provide instructions to use a `nix` container image so that the `git-bug` binary can be built with the same tools this repository uses (at least for development), and improves the reproducibility factor.\n\n\u003e ![TIP]\n\u003e you can substitute `podman` with `docker`\n\n### start a container\n\n```\npodman run -it --rm ghcr.io/nixos/nix:latest\n```\n\n### configure nix\n\n```\necho 'experimental-features = nix-command flakes' \u003e\u003e /etc/nix/nix.conf\n```\n\n### create a new authentication key of the same type/size as your existing key\n\n```\nssh-keygen -t \u003ctype\u003e -b \u003csize\u003e [-C test-key]\n```\n\n\u003e [!IMPORTANT]\n\u003e Add the pubkey to your repository as a read-only deploy key.\n\n### create a temporary directory for git-bug\n\n```\ncd $(mktemp -d)\n```\n\n### clone git-bug\n\n```\ngit clone -b v0.8.1 --depth=1 https://github.com/git-bug/git-bug.git .\n```\n\n### activate the development shell\n\nthis might take some time depending on your network and machine.\n\n```\nnix develop\n```\n\n### build git-bug\n\n```\nmake build\n```\n\n### extend PATH\n\n```\nexport PATH=\"${PWD}:${PATH}\"\n```\n\n### create a new directory and clone your repo\n\n```\ncd $(mktemp -d) \u0026\u0026 git clone git@github.com:MartyLake/test_git_bug.git\n```\n\n### configure git user info\n\n```\ngit config user.name git-bug-test \u0026\u0026 git config user.email test@localhost\n```\n\n### create a local git-bug identity\n\n```\ngit bug user new\n```\n\n### start ssh-agent\n\ngit-bug currently fails if `SSH_AUTH_SOCK` isn't set (related: #1023)\n\n```\neval \"$(ssh-agent -s)\"\n```\n\n### add the temporary key to the agent\n\n```\nssh-add\n```\n\n\u003e [!NOTE]\n\u003e **AHA!** i think i discovered the issue. see below.\n\n### attempt to pull from the remote\n\n```\ngit bug pull\n```\n\nexpected output for this is simply:\n\n```\nFetching remote ...\nalready up-to-date\nMerging data ...\n```\n\nwith nothing else.\n\n---\n\nas indicated above, i think i discovered the issue you're experiencing. initially, i ran `git bug pull` after starting the agent (without adding the key). this reproduced the error you're seeing:\n\n```\nbash-5.2# git bug pull\nFetching remote ...\nError: ssh: handshake failed: ssh: unable to authenticate, attempted methods [none publickey], no supported methods remain\n```\n\n`git clone` worked, but that's because `git` is a lot smarter than `go-git`, which is the library that `git-bug` uses for git operations. i _think_ we'll find that on the machine you've been running the tests on, your key isn't added to your agent.\n\nyou can check this:\n\n```\nssh-add -L\n```\n\nwhat you'd see if this assumption is correct, is:\n\n```\nThe agent has no identities.\n```\n\n\u003e [!NOTE]\n\u003e alternatively, you might actually see some output here indicating you have one or more keys added, but if you do, none of them have access to your repo\n\ngiven that you're using `gpg-agent` in ssh-agent mode, i'll ask a couple follow-up questions to confirm this assumption:\n\n1. if the authentication key you're using is **a gpg authentication subkey**, have you added the keygrip to `~/.gnupg/sshcontrol`?\n2. if the authentication key you're using in an ssh key, are you sure you see it when running `ssh-add -L`?","files":null},{"type":6,"timestamp":1746840153,"nonce":"+GraV8YXwyXl0aj7lA2Fl7s1kYA=","metadata":{"github-id":"UCE_lALOCGKeh86q9S1-zmZ0zLA"},"target":"0982e506159c28e5e9d12455932e6c2dc6bcc604bfbec34614cd6c54cd84aed1","message":"thanks for stepping through those commands!\n\nunfortunately, there isn't anything i can see that indicates custom configuration that would potentially lead to an issue with git-bug. i have (effectively) the same exact configuration, save for a `insteadOf` directive that rewrites `git@github.com:` to the fully-qualified `ssh://git@github.com/` -- but in my earlier comment, the test was performed with this disabled.\n\ni also use gpg-agent as ssh-agent, and if my key is not cached when i run `git-bug-pull`, i'm prompted to enter my passphrase -- if my key is cached, the cache entry is used and i authenticate successfully to the remote.\n\ni'm at a bit of a loss as to why you are experiencing this issue. these next suggestions may be a bit more involved, but would help validate (or provide steps to reproduce) your issue. i'll provide some reproducible steps below.\n\n---\n\ni'd recommend doing this in a container to provide a decent level of isolation. i'll provide instructions to use a `nix` container image so that the `git-bug` binary can be built with the same tools this repository uses (at least for development), and improves the reproducibility factor.\n\n\u003e ![TIP]\n\u003e you can substitute `podman` with `docker`\n\n### start a container\n\n```\npodman run -it --rm ghcr.io/nixos/nix:latest\n```\n\n### configure nix\n\n```\necho 'experimental-features = nix-command flakes' \u003e\u003e /etc/nix/nix.conf\n```\n\n### create a new authentication key of the same type/size as your existing key\n\n```\nssh-keygen -t \u003ctype\u003e -b \u003csize\u003e [-C test-key]\n```\n\n\u003e [!IMPORTANT]\n\u003e Add the pubkey to your repository as a read-only deploy key.\n\n### create a temporary directory for git-bug\n\n```\ncd $(mktemp -d)\n```\n\n### clone git-bug\n\n```\ngit clone -b v0.8.1 --depth=1 https://github.com/git-bug/git-bug.git .\n```\n\n### activate the development shell\n\nthis might take some time depending on your network and machine.\n\n```\nnix develop\n```\n\n### build git-bug\n\n```\nmake build\n```\n\n### extend PATH\n\n```\nexport PATH=\"${PWD}:${PATH}\"\n```\n\n### create a new directory and clone your repo\n\n```\ncd $(mktemp -d) \u0026\u0026 git clone git@github.com:MartyLake/test_git_bug.git\n```\n\n### configure git user info\n\n```\ngit config user.name git-bug-test \u0026\u0026 git config user.email test@localhost\n```\n\n### create a local git-bug identity\n\n```\ngit bug user new\n```\n\n### start ssh-agent\n\ngit-bug currently fails if `SSH_AUTH_SOCK` isn't set (related: #1023)\n\n```\neval \"$(ssh-agent -s)\"\n```\n\n### add the temporary key to the agent\n\n```\nssh-add\n```\n\n_AHA! i think i discovered your issue. continue these steps, but read after the break below._\n\n### attempt to pull from the remote\n\n```\ngit bug pull\n```\n\nexpected output for this is simply:\n\n```\nFetching remote ...\nalready up-to-date\nMerging data ...\n```\n\nwith nothing else.\n\n---\n\nas indicated above, i think i discovered the issue you're experiencing. initially, i ran `git bug pull` after starting the agent (without adding the key). this reproduced the error you're seeing:\n\n```\nbash-5.2# git bug pull\nFetching remote ...\nError: ssh: handshake failed: ssh: unable to authenticate, attempted methods [none publickey], no supported methods remain\n```\n\n`git clone` worked, but that's because `git` is a lot smarter than `go-git`, which is the library that `git-bug` uses for git operations. i _think_ we'll find that on the machine you've been running the tests on, your key isn't added to your agent.\n\nyou can check this:\n\n```\nssh-add -L\n```\n\nwhat you'd see if this assumption is correct, is:\n\n```\nThe agent has no identities.\n```\n\n\u003e [!NOTE]\n\u003e alternatively, you might actually see some output here indicating you have one or more keys added, but if you do, none of them have access to your repo\n\ngiven that you're using `gpg-agent` in ssh-agent mode, i'll ask a couple follow-up questions to confirm this assumption:\n\n1. if the authentication key you're using is **a gpg authentication subkey**, have you added the keygrip to `~/.gnupg/sshcontrol`?\n2. if the authentication key you're using in an ssh key, are you sure you see it when running `ssh-add -L`?","files":null},{"type":6,"timestamp":1746840522,"nonce":"1Mp+fInTSFmyTocZvAGmJLEG4+A=","metadata":{"github-id":"UCE_lALOCGKeh86q9S1-zmZ02lA"},"target":"0982e506159c28e5e9d12455932e6c2dc6bcc604bfbec34614cd6c54cd84aed1","message":"thanks for stepping through those commands!\n\nunfortunately, there isn't anything i can see that indicates custom configuration that would potentially lead to an issue with git-bug. i have (effectively) the same exact configuration, save for a `insteadOf` directive that rewrites `git@github.com:` to the fully-qualified `ssh://git@github.com/` -- but in my earlier comment, the test was performed with this disabled.\n\ni also use gpg-agent as ssh-agent, and if my key is not cached when i run `git-bug-pull`, i'm prompted to enter my passphrase -- if my key is cached, the cache entry is used and i authenticate successfully to the remote.\n\ni'm at a bit of a loss as to why you are experiencing this issue. these next suggestions may be a bit more involved, but would help validate (or provide steps to reproduce) your issue. i'll provide some reproducible steps below.\n\n---\n\ni'd recommend doing this in a container to provide a decent level of isolation. i'll provide instructions to use a `nix` container image so that the `git-bug` binary can be built with the same tools this repository uses (at least for development), and improves the reproducibility factor.\n\n\u003e [!TIP]\n\u003e you can substitute `podman` with `docker`\n\n### start a container\n\n```\npodman run -it --rm ghcr.io/nixos/nix:latest\n```\n\n### configure nix\n\n```\necho 'experimental-features = nix-command flakes' \u003e\u003e /etc/nix/nix.conf\n```\n\n### create a new authentication key of the same type/size as your existing key\n\n```\nssh-keygen -t \u003ctype\u003e -b \u003csize\u003e [-C test-key]\n```\n\n\u003e [!IMPORTANT]\n\u003e Add the pubkey to your repository as a read-only deploy key.\n\n### create a temporary directory for git-bug\n\n```\ncd $(mktemp -d)\n```\n\n### clone git-bug\n\n```\ngit clone -b v0.8.1 --depth=1 https://github.com/git-bug/git-bug.git .\n```\n\n### activate the development shell\n\nthis might take some time depending on your network and machine.\n\n```\nnix develop\n```\n\n### build git-bug\n\n```\nmake build\n```\n\n### extend PATH\n\n```\nexport PATH=\"${PWD}:${PATH}\"\n```\n\n### create a new directory and clone your repo\n\n```\ncd $(mktemp -d) \u0026\u0026 git clone git@github.com:MartyLake/test_git_bug.git\n```\n\n### configure git user info\n\n```\ngit config user.name git-bug-test \u0026\u0026 git config user.email test@localhost\n```\n\n### create a local git-bug identity\n\n```\ngit bug user new\n```\n\n### start ssh-agent\n\ngit-bug currently fails if `SSH_AUTH_SOCK` isn't set (related: #1023)\n\n```\neval \"$(ssh-agent -s)\"\n```\n\n### add the temporary key to the agent\n\n```\nssh-add\n```\n\n_AHA! i think i discovered your issue. continue these steps, but read after the break below._\n\n### attempt to pull from the remote\n\n```\ngit bug pull\n```\n\nexpected output for this is simply:\n\n```\nFetching remote ...\nalready up-to-date\nMerging data ...\n```\n\nwith nothing else.\n\n---\n\nas indicated above, i think i discovered the issue you're experiencing. initially, i ran `git bug pull` after starting the agent (without adding the key). this reproduced the error you're seeing:\n\n```\nbash-5.2# git bug pull\nFetching remote ...\nError: ssh: handshake failed: ssh: unable to authenticate, attempted methods [none publickey], no supported methods remain\n```\n\n`git clone` worked, but that's because `git` is a lot smarter than `go-git`, which is the library that `git-bug` uses for git operations. i _think_ we'll find that on the machine you've been running the tests on, your key isn't added to your agent.\n\nyou can check this:\n\n```\nssh-add -L\n```\n\nwhat you'd see if this assumption is correct, is:\n\n```\nThe agent has no identities.\n```\n\n\u003e [!NOTE]\n\u003e alternatively, you might actually see some output here indicating you have one or more keys added, but if you do, none of them have access to your repo\n\ngiven that you're using `gpg-agent` in ssh-agent mode, i'll ask a couple follow-up questions to confirm this assumption:\n\n1. if the authentication key you're using is **a gpg authentication subkey**, have you added the keygrip to `~/.gnupg/sshcontrol`?\n2. if the authentication key you're using in an ssh key, are you sure you see it when running `ssh-add -L`?","files":null},{"type":6,"timestamp":1746840631,"nonce":"cKS6UXfl10Zgw9zmkxQmnYt/Spo=","metadata":{"github-id":"UCE_lALOCGKeh86q9S1-zmZ03ms"},"target":"0982e506159c28e5e9d12455932e6c2dc6bcc604bfbec34614cd6c54cd84aed1","message":"thanks for stepping through those commands!\n\nunfortunately, there isn't anything i can see that indicates custom configuration that would potentially lead to an issue with git-bug. i have (effectively) the same exact configuration, save for a `insteadOf` directive that rewrites `git@github.com:` to the fully-qualified `ssh://git@github.com/` -- but in my earlier comment, the test was performed with this disabled.\n\ni also use gpg-agent as ssh-agent, and if my key is not cached when i run `git-bug-pull`, i'm prompted to enter my passphrase -- if my key is cached, the cache entry is used and i authenticate successfully to the remote.\n\ni'm at a bit of a loss as to why you are experiencing this issue. these next suggestions may be a bit more involved, but would help validate (or provide steps to reproduce) your issue. i'll provide some reproducible steps below.\n\n---\n\ni'd recommend doing this in a container to provide a decent level of isolation. i'll provide instructions to use a `nix` container image so that the `git-bug` binary can be built with the same tools this repository uses (at least for development), and improves the reproducibility factor.\n\n\u003e [!TIP]\n\u003e you can substitute `podman` with `docker`\n\n### start a container\n\n```\npodman run -it --rm ghcr.io/nixos/nix:latest\n```\n\n### configure nix\n\n```\necho 'experimental-features = nix-command flakes' \u003e\u003e /etc/nix/nix.conf\n```\n\n### create a new authentication key of the same type/size as your existing key\n\n```\nssh-keygen -t \u003ctype\u003e -b \u003csize\u003e [-C test-key]\n```\n\n\u003e [!IMPORTANT]\n\u003e Add the pubkey to your repository as a read-only deploy key.\n\n### create a temporary directory for git-bug\n\n```\ncd $(mktemp -d)\n```\n\n### clone git-bug\n\n```\ngit clone -b v0.8.1 --depth=1 https://github.com/git-bug/git-bug.git .\n```\n\n### activate the development shell\n\nthis might take some time depending on your network and machine.\n\n```\nnix develop\n```\n\n### build git-bug\n\n```\nmake build\n```\n\n### extend PATH\n\n```\nexport PATH=\"${PWD}:${PATH}\"\n```\n\n### create a new directory and clone your repo\n\n```\ncd $(mktemp -d) \u0026\u0026 git clone git@github.com:MartyLake/test_git_bug.git\n```\n\n### configure git user info\n\n```\ngit config user.name git-bug-test \u0026\u0026 git config user.email test@localhost\n```\n\n### create a local git-bug identity\n\n```\ngit bug user new\n```\n\n### start ssh-agent\n\ngit-bug currently fails if `SSH_AUTH_SOCK` isn't set (related: #1023)\n\n```\neval \"$(ssh-agent -s)\"\n```\n\n### add the temporary key to the agent\n\n```\nssh-add\n```\n\n_AHA! i think i discovered your issue. continue these steps, but read after the break below._\n\n### attempt to pull from the remote\n\n```\ngit bug pull\n```\n\nexpected output for this is simply:\n\n```\nFetching remote ...\nalready up-to-date\nMerging data ...\n```\n\nwith nothing else (assuming you have no git-bug objects in the remote repo). this indicates a successful read of the remote repository.\n\nwas this reproducible for you?\n\n---\n\n## aha!\n\nas indicated above, i think i discovered the issue you're experiencing. initially, i ran `git bug pull` after starting the agent (without adding the key). this reproduced the error you're seeing:\n\n```\nbash-5.2# git bug pull\nFetching remote ...\nError: ssh: handshake failed: ssh: unable to authenticate, attempted methods [none publickey], no supported methods remain\n```\n\n`git clone` worked, but that's because `git` is a lot smarter than `go-git`, which is the library that `git-bug` uses for git operations. i _think_ we'll find that on the machine you've been running the tests on, your key isn't added to your agent.\n\nyou can check this:\n\n```\nssh-add -L\n```\n\nwhat you'd see if this assumption is correct, is:\n\n```\nThe agent has no identities.\n```\n\n\u003e [!NOTE]\n\u003e alternatively, you might actually see some output here indicating you have one or more keys added, but if you do, none of them have access to your repo\n\ngiven that you're using `gpg-agent` in ssh-agent mode, i'll ask a couple follow-up questions to confirm this assumption:\n\n1. if the authentication key you're using is **a gpg authentication subkey**, have you added the keygrip to `~/.gnupg/sshcontrol`?\n2. if the authentication key you're using in an ssh key, are you sure you see it when running `ssh-add -L`?","files":null},{"type":6,"timestamp":1746840713,"nonce":"rDRN+ZlsZSEjKKioRiZiurW/iaU=","metadata":{"github-id":"UCE_lALOCGKeh86q9S1-zmZ04Tg"},"target":"0982e506159c28e5e9d12455932e6c2dc6bcc604bfbec34614cd6c54cd84aed1","message":"thanks for stepping through those commands!\n\nunfortunately, there isn't anything i can see that indicates custom configuration that would potentially lead to an issue with git-bug. i have (effectively) the same exact configuration, save for a `insteadOf` directive that rewrites `git@github.com:` to the fully-qualified `ssh://git@github.com/` -- but in my earlier comment, the test was performed with this disabled.\n\ni also use gpg-agent as ssh-agent, and if my key is not cached when i run `git-bug-pull`, i'm prompted to enter my passphrase -- if my key is cached, the cache entry is used and i authenticate successfully to the remote.\n\ni'm at a bit of a loss as to why you are experiencing this issue. these next suggestions may be a bit more involved, but would help validate (or provide steps to reproduce) your issue. i'll provide some reproducible steps below.\n\n---\n\ni'd recommend doing this in a container to provide a decent level of isolation. i'll provide instructions to use a `nix` container image so that the `git-bug` binary can be built with the same tools this repository uses (at least for development), and improves the reproducibility factor.\n\n\u003e [!TIP]\n\u003e you can substitute `podman` with `docker`\n\n### start a container\n\n```\npodman run -it --rm ghcr.io/nixos/nix:latest\n```\n\n### configure nix\n\n```\necho 'experimental-features = nix-command flakes' \u003e\u003e /etc/nix/nix.conf\n```\n\n### create a new authentication key of the same type/size as your existing key\n\n```\nssh-keygen -t \u003ctype\u003e -b \u003csize\u003e [-C test-key]\n```\n\n\u003e [!IMPORTANT]\n\u003e Add the pubkey to your repository as a read-only deploy key.\n\n### create a temporary directory for git-bug\n\n```\ncd $(mktemp -d)\n```\n\n### clone git-bug\n\n```\ngit clone -b v0.8.1 --depth=1 https://github.com/git-bug/git-bug.git .\n```\n\n### activate the development shell\n\nthis might take some time depending on your network and machine.\n\n```\nnix develop\n```\n\n### build git-bug\n\n```\nmake build\n```\n\n### extend PATH\n\n```\nexport PATH=\"${PWD}:${PATH}\"\n```\n\n### create a new directory and clone your repo\n\n```\ncd $(mktemp -d) \u0026\u0026 git clone git@github.com:MartyLake/test_git_bug.git\n```\n\n### configure git user info\n\n```\ngit config user.name git-bug-test \u0026\u0026 git config user.email test@localhost\n```\n\n### create a local git-bug identity\n\n```\ngit bug user new\n```\n\n### start ssh-agent\n\ngit-bug currently fails if `SSH_AUTH_SOCK` isn't set (related: #1023)\n\n```\neval \"$(ssh-agent -s)\"\n```\n\n### add the temporary key to the agent\n\n```\nssh-add\n```\n\n_AHA! i think i discovered your issue. continue these steps, but read after the break below._\n\n### attempt to pull from the remote\n\n```\ngit bug pull\n```\n\nexpected output for this is simply:\n\n```\nFetching remote ...\nalready up-to-date\nMerging data ...\n```\n\nwith nothing else (assuming you have no git-bug objects in the remote repo). this indicates a successful read of the remote repository.\n\nwas this reproducible for you?\n\n### clean up\n\n1. exit the container\n2. delete the read-only deploy key from your repository\n3. optional: remove the image: `podman rmi ghcr.io/nixos/nix:latest`\n\n---\n\n### aha!\n\nas indicated above, i think i discovered the issue you're experiencing. initially, i ran `git bug pull` after starting the agent (without adding the key). this reproduced the error you're seeing:\n\n```\nbash-5.2# git bug pull\nFetching remote ...\nError: ssh: handshake failed: ssh: unable to authenticate, attempted methods [none publickey], no supported methods remain\n```\n\n`git clone` worked, but that's because `git` is a lot smarter than `go-git`, which is the library that `git-bug` uses for git operations. i _think_ we'll find that on the machine you've been running the tests on, your key isn't added to your agent.\n\nyou can check this:\n\n```\nssh-add -L\n```\n\nwhat you'd see if this assumption is correct, is:\n\n```\nThe agent has no identities.\n```\n\n\u003e [!NOTE]\n\u003e alternatively, you might actually see some output here indicating you have one or more keys added, but if you do, none of them have access to your repo\n\ngiven that you're using `gpg-agent` in ssh-agent mode, i'll ask a couple follow-up questions to confirm this assumption:\n\n1. if the authentication key you're using is **a gpg authentication subkey**, have you added the keygrip to `~/.gnupg/sshcontrol`?\n2. if the authentication key you're using in an ssh key, are you sure you see it when running `ssh-add -L`?","files":null},{"type":3,"timestamp":1747411420,"nonce":"MCQHG8YXoChGp5KP2pf9+kxS4wM=","metadata":{"github-id":"IC_kwDOCGKeh86sFh-E","github-url":"https://github.com/git-bug/git-bug/issues/1139#issuecomment-2887131012"},"message":"hey @MartyLake - have you had a chance to run through that test yet? i _think_ we'll find that your key wasn't added to the agent (and for whatever reason you aren't getting prompted to add it). i'm working on the lower level transport issues, and want to make sure you haven't hit an  unknown issue with how ssh is currently implemented.","files":null}]}