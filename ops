{"author":{"id":"d82e3b0277388fab1285e702dfba0ce3b709e1919233977abaeab636c4c57550"},"ops":[{"type":3,"timestamp":1669032187,"nonce":"2hoTHaiIxMSX8WaDvgEW9AN9bno=","metadata":{"github-id":"IC_kwDOCGKeh85Oy2Va","github-url":"https://github.com/git-bug/git-bug/issues/926#issuecomment-1321952602"},"message":"This is clearly my fault but it's a bit odd that tests pass without the `-bench=.` flag and fail if it's present.  I'll have to remember to run tests via the `Makefile` every now and then (before pushing commits?).  I'll admit I usually run tests using `go test ./...` or `go test -v ./...` just to make them faster.\n\nMy initial thought was that the shell used by the `Makefile` was subtly different but now I've got some investigation into the benchmarking environment.  Piping the output to `less` works because that's disabling ANSI colors (you can see this with `grep` and many other *nix tools that colorize the output for humans).","files":null},{"type":3,"timestamp":1673042224,"nonce":"fIojMQEUV8NUs70+SDksK96q6qw=","metadata":{"github-id":"IC_kwDOCGKeh85R6FhQ","github-url":"https://github.com/git-bug/git-bug/issues/926#issuecomment-1374181456"},"message":"This is pretty bizarre - when the tests are run with benchmarking (`go test -v -bench=. ./...`), `os.Stdout` contains an FD that is in fact a TTY.  When the tests are run without benchmarking, `os.Stdout` contains an FD that is NOT a TTY.  Here's the package/method/function stack I've investigated so far - the problem is in Go `cmd` runner:\n\n- In `fatih/color`, `NoColor` is `false` during benchmarking and `true` during normal test runs (https://github.com/fatih/color/blob/a05da93ebe62ca9fc6791d3376ec4dad01196448/color.go#L22-L23)\n- In `mattn/go-isatty`, `IsTerminal(os.Stdout.Fd()` is `true` during benchmarking and `false` during normal test runs (https://github.com/mattn/go-isatty/blob/ed75e619dc0f0489fd4062163a7d061eaa249b9c/isatty_tcgets.go#L10-L11)\n- In `x/sys/unix`, `unix.IoctlGetTermios(int(os.Stdout.Fd()), unix.TCGETS)` returns a `Termios` during benchmarking and an `error` during normal testing (https://cs.opensource.google/go/x/sys/+/refs/tags/v0.4.0:unix/ioctl.go;drc=b36040661688bbbde06c38ea80af105ebf21415b;l=71)\n- In `command/go/internal/test`, output is sent to `Stdout` (a TTY) if a) there's not an explicit test package, b) benchmarking is enabled, c) if fuzzing is enabled or d) if only one package is explicitly requested.  Otherwise, the test output is buffered and `Stdout` is NOT a TTY (so the ANSI escape sequences aren't generated).\n\nFailing cases:\n- `go test -v -bench=. ./...`\n- `go test -v -fuzz=. ./...`\n- `cd commands/bug \u0026\u0026 go test -v ./...`\n\nPassing case:\n- `go test -v ./...`\n\nI've asked for advice in the #testing channel of the Gopher's Slack - my opinion is that buffered or not, the output shouldn't change in this case but I'm waiting for advice on either a work-around or on submitting an issue with a proper description.  At this point, I've got a tiny and concise program demonstrates this error so the good news is that it's not a problem with `git-bug`.","files":null},{"type":3,"timestamp":1673103437,"nonce":"IKPDRmVi6a8rObrn4cgNrjy27p4=","metadata":{"github-id":"IC_kwDOCGKeh85R7U9g","github-url":"https://github.com/git-bug/git-bug/issues/926#issuecomment-1374506848"},"message":"Submitted to the Go issue tracker - https://github.com/golang/go/issues/57671","files":null},{"type":3,"timestamp":1673107469,"nonce":"KoNJK4e75EHoFZct492mzaPC05Q=","metadata":{"github-id":"IC_kwDOCGKeh85R7Zww","github-url":"https://github.com/git-bug/git-bug/issues/926#issuecomment-1374526512"},"message":"It turns out this issue was discussed and rejected in https://github.com/golang/go/issues/34877.  Fortunately, I already had a fix ready and have opened the associated PR - https://github.com/MichaelMure/git-bug/pull/984.","files":null}]}