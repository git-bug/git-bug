{"author":{"id":"d84b99baceea68a04ba65b39150ff53df82e9ceb7adbe0fe70bf2dbf6d96fad1"},"ops":[{"type":3,"timestamp":1706953200,"nonce":"z8XRDH/F0NYcynQm5AAJRHFmZyQ=","metadata":{"github-id":"IC_kwDOCGKeh85ywO2t","github-url":"https://github.com/git-bug/git-bug/issues/1068#issuecomment-1925246381"},"message":"This issue overlaps with #18 but brings up different concerns.","files":null},{"type":6,"timestamp":1706954647,"nonce":"fqxq4A6X4BdGXhd4lnK3LPEiM78=","metadata":{"github-id":"UCE_lALOCGKeh85ywO2tzj9jPps"},"target":"ba72e4d50dbfcf3cad3068dc2e1772b2b67961eb4c06ba438f872e622b1f1f09","message":"This issue overlaps with #18 but brings up different concerns.\n\n---\n\nMy impression so far is that it is impossible to refer to a stable id for a bug.\n\nI get the impression that the project is opposed to some prefix + incrementing numbers. I don’t care about being 100% distributed since I’m just using it for my own issues right now. And I am willing to risk using an issue prefix that someone else could have taken.\n\n### The final commit: stable and globally unique id\n\nFor the long term, it seems most important to link to the issue id in the immutable Git history (not whatever feature branch which might be rebased and so on). Conceptually (irrespective of what this program does) those issues should have a globally unique id at this point. They may or may not point to a central (not distributed) instance. Probably not archived since there might be more updates after the commit (maybe it fails to solve the issue).\n\nTruly distributed issue tracking for this permanent part of the Git history (again as opposed to feature branches or mailing list patches) doesn’t seem worth the hassle.\n\n### The work in progress commits: SHA-1 or ad hoc prefixes with incrementing numbers\n\nI use git bug for one project that I’m working on which doesn’t have an issue/bug tracker. There I note issues I find. I might try to solve the issues and send out patches to the mailing list. Then I finally go and close the issue if they get merged to/included in the main branch.\n\nI have not tried to link commits and these bugs before. I just mention the branch name in the issue. But I might try this:\n\n- Create a prefix for these bugs: my initials + the initial of the project (let’s say `xyz`)\n- Issues are incremented manually: the fifth bug is xyz-5\n- I can’t mention these issues in my commit messages because it is on my own (local/private) bug tracker\n  - So I add a Git Note which says something like `Fixes: xyz-5`\n  - These notes are not published\n- But in case there are like three people who have my issue tracker and *they* might care: I can add a custom header with the issue key\n  - `X-Issue-Id: xyz-5`\n- Bonus: I can add this issue id as a suffix to my branch name (e.g. `fix-negation-xyz-5` and use that to to discuss the branch outside of Git (like on the mailing list)\n  - More likely that the branch name is unique among the currently active ones\n\nThis scheme permanently links bugs/issues but is still private to me. But the links can still be made available to others by publishing the Git Notes which tie the commits to the issue ids.\n\n### Issue key aliases\n\n“The final commit” said that the issue key in the final commit should be the final, globally unique one. But using an id that people move away from is not necessarily a big deal. Issue trackers can change the “project” or whatever of an issue, thus changing the key, but still allow links to get routed to the right place.","files":null}]}